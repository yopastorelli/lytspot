---
import Container from './common/Container';
import Button from './common/Button';

// Define os itens do menu
const menuItems = [
  { href: '/portfolio', text: 'Portfolio' },
  { href: '/sobre', text: 'Sobre' },
  { href: '/servicos', text: 'Servi√ßos' },
];

// Acessa o pathname da URL atual corretamente
const currentPath = new URL(Astro.request.url).pathname;
---
<header class="fixed w-full z-50 bg-light/90 backdrop-blur-sm shadow-soft">
  <Container>
    <nav class="flex items-center justify-between py-4">
      <!-- Logo -->
      <a href="/" class="text-2xl font-bold text-primary flex items-center gap-2">
        <img src="/images/azul fundo branco.png" alt="LYTSPOT" class="h-14" />
      </a>

      <!-- Mobile menu button -->
      <button
        id="menu-toggle"
        class="md:hidden text-neutral hover:text-primary focus:outline-none focus:ring-2 focus:ring-primary p-2"
        aria-label="Toggle menu"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16M4 18h16"
          ></path>
        </svg>
      </button>

      <!-- Desktop menu -->
      <div class="hidden md:flex items-center gap-8">
        {menuItems.map(item => (
          <a 
            href={item.href}
            class={`text-neutral hover:text-primary transition-colors ${item.href === currentPath ? 'text-primary font-semibold' : ''}`}
          >
            {item.text}
          </a>
        ))}
        <Button variant="primary" href="/contato">
          Contato
        </Button>
      </div>

      <!-- Mobile menu -->
      <div
        id="mobile-menu"
        class="hidden fixed inset-0 z-50 bg-light/95 backdrop-blur-sm md:hidden"
      >
        <Container>
          <div class="flex flex-col items-center justify-center min-h-screen gap-8 py-20">
            <!-- Close button -->
            <button
              id="close-menu"
              class="absolute top-6 right-6 text-neutral hover:text-primary focus:outline-none focus:ring-2 focus:ring-primary p-2"
              aria-label="Close menu"
            >
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M6 18L18 6M6 6l12 12"
                ></path>
              </svg>
            </button>

            {menuItems.map(item => (
              <a 
                href={item.href}
                class={`text-xl text-neutral hover:text-primary transition-colors ${item.href === currentPath ? 'text-primary font-semibold' : ''}`}
              >
                {item.text}
              </a>
            ))}
            <Button variant="primary" href="/contato" size="lg">
              Contato
            </Button>
          </div>
        </Container>
      </div>
    </nav>
  </Container>

  <script>
    const menuToggle = document.getElementById('menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    const closeMenu = document.getElementById('close-menu');

    function toggleMenu(show: boolean) {
      if (!mobileMenu) return;
      
      if (show) {
        mobileMenu.classList.remove('hidden');
        document.body.classList.add('overflow-hidden');
      } else {
        mobileMenu.classList.add('hidden');
        document.body.classList.remove('overflow-hidden');
      }
    }

    if (menuToggle) {
      menuToggle.addEventListener('click', () => toggleMenu(true));
    }

    if (closeMenu) {
      closeMenu.addEventListener('click', () => toggleMenu(false));
    }

    // Close menu when clicking outside
    if (mobileMenu) {
      mobileMenu.addEventListener('click', (e) => {
        if (e.target === mobileMenu) {
          toggleMenu(false);
        }
      });
    }

    // Close menu on window resize if desktop breakpoint is reached
    window.addEventListener('resize', () => {
      if (window.innerWidth >= 768) { // md breakpoint
        toggleMenu(false);
      }
    });
  </script>
</header>
