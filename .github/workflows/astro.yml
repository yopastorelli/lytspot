# Workflow para build e deploy de um site Astro no GitHub Pages
name: Deploy Astro site to Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  BUILD_PATH: "." # Caminho padrão do build

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Garante acesso ao histórico completo e todas as branches

      - name: Verificar conteúdo da pasta public antes do build
        run: |
          echo "Conteúdo da pasta public antes do build:"
          ls -R public

      - name: Detectar gerenciador de pacotes
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.BUILD_PATH }}/${{ steps.detect-package-manager.outputs.lockfile }}

      - name: Configurar GitHub Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Instalar dependências
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: ${{ env.BUILD_PATH }}

      - name: Build com Astro
        run: |
          ${{ steps.detect-package-manager.outputs.runner }} astro build \
            --site "${{ steps.pages.outputs.origin }}" \
            --base "${{ steps.pages.outputs.base_path }}"
        working-directory: ${{ env.BUILD_PATH }}

      - name: Verificar conteúdo do build
        run: |
          echo "Conteúdo do build (dist/):"
          ls -R ${{ env.BUILD_PATH }}/dist

      - name: Upload do artefato para o GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.BUILD_PATH }}/dist

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout completo do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Criar branch gh-pages (se necessário)
        run: |
          if ! git ls-remote --exit-code origin gh-pages; then
            echo "Criando branch gh-pages"
            git checkout --orphan gh-pages
            git rm -rf .
            git commit --allow-empty -m "Criar branch gh-pages"
            git push origin gh-pages
          else
            echo "Branch gh-pages já existe"
          fi

      - name: Deploy para GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Verificar arquivos no gh-pages
        run: |
          git fetch origin gh-pages
          git checkout gh-pages
          echo "Arquivos no gh-pages:"
          ls -R
