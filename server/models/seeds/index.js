/**
 * Sistema de seed unificado para o Lytspot
 * @description Este m√≥dulo centraliza a l√≥gica de popula√ß√£o do banco de dados
 * @version 1.0.0 - 2025-03-12
 */

import { PrismaClient } from '@prisma/client';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import { serviceDefinitions, getServiceDefinitionsForFrontend } from './serviceDefinitions.js';

// Configura√ß√£o para obter o diret√≥rio atual
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Cliente Prisma para acesso ao banco de dados
const prisma = new PrismaClient();

/**
 * Fun√ß√£o principal para popular o banco de dados
 * @param {Object} options Op√ß√µes de configura√ß√£o
 * @param {boolean} options.force Se verdadeiro, for√ßa a recria√ß√£o dos dados mesmo se j√° existirem
 * @param {string} options.environment Ambiente para execu√ß√£o (development, test, production)
 * @returns {Promise<boolean>} Verdadeiro se a opera√ß√£o foi conclu√≠da com sucesso
 */
export async function seedDatabase(options = {}) {
  const { 
    force = false, 
    environment = process.env.NODE_ENV || 'development',
    syncDemoData = true
  } = options;
  
  console.log(`üîÑ Iniciando seed do banco de dados (ambiente: ${environment})...`);
  
  try {
    // Verificar ambiente
    if (environment === 'production' && !force) {
      console.warn('‚ö†Ô∏è Tentativa de seed em produ√ß√£o sem flag force. Opera√ß√£o cancelada.');
      return false;
    }
    
    // Conectar ao banco de dados
    await prisma.$connect();
    console.log('‚úÖ Conex√£o com o banco de dados estabelecida com sucesso!');
    
    // Seed de servi√ßos
    await seedServices(force);
    
    // Sincronizar dados de demonstra√ß√£o se solicitado
    if (syncDemoData) {
      await syncDemonstrationData();
    }
    
    console.log('‚úÖ Banco de dados populado com sucesso!');
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao popular banco de dados:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

/**
 * Popula a tabela de servi√ßos com os dados definidos
 * @param {boolean} force Se verdadeiro, for√ßa a recria√ß√£o dos servi√ßos mesmo se j√° existirem
 */
async function seedServices(force = false) {
  // Verificar se j√° existem servi√ßos
  const existingServices = await prisma.servico.count();
  
  if (existingServices > 0 && !force) {
    console.log(`‚ÑπÔ∏è ${existingServices} servi√ßos j√° existem. Pulando seed.`);
    return;
  }
  
  // Limpar servi√ßos existentes se force=true ou se n√£o houver servi√ßos
  if (force || existingServices === 0) {
    if (existingServices > 0) {
      await prisma.servico.deleteMany({});
      console.log('üóëÔ∏è Servi√ßos existentes removidos');
    }
    
    // Inserir servi√ßos
    console.log('üìù Inserindo servi√ßos no banco de dados...');
    for (const service of serviceDefinitions) {
      await prisma.servico.create({ data: service });
    }
    
    const insertedServices = await prisma.servico.count();
    console.log(`‚úÖ ${insertedServices} servi√ßos inseridos com sucesso!`);
  }
}

/**
 * Sincroniza os dados de demonstra√ß√£o com os dados do banco
 * Garante que o simulador de pre√ßos use os mesmos dados do painel administrativo
 * mesmo quando a API n√£o estiver dispon√≠vel
 */
async function syncDemonstrationData() {
  try {
    console.log('üîÑ Sincronizando dados de demonstra√ß√£o...');
    
    // Gerar dados de demonstra√ß√£o a partir das defini√ß√µes centralizadas
    const demoData = getServiceDefinitionsForFrontend();
    
    // Caminho para o arquivo de dados de demonstra√ß√£o
    const demoFilePath = path.resolve(process.cwd(), 'src', 'components', 'pricing', 'dadosDemonstracao.js');
    
    // Verificar se o diret√≥rio existe
    const demoFileDir = path.dirname(demoFilePath);
    try {
      await fs.access(demoFileDir);
    } catch (error) {
      console.log(`‚ö†Ô∏è Diret√≥rio ${demoFileDir} n√£o encontrado. Criando...`);
      await fs.mkdir(demoFileDir, { recursive: true });
    }
    
    // Gerar conte√∫do do arquivo
    const timestamp = new Date().toISOString();
    const fileContent = `/**
 * Dados de demonstra√ß√£o para o simulador de pre√ßos
 * Gerado automaticamente em ${timestamp}
 * N√ÉO EDITE ESTE ARQUIVO MANUALMENTE
 */

export const dadosDemonstracao = ${JSON.stringify(demoData, null, 2)};
export const servicos = dadosDemonstracao;

export default dadosDemonstracao;
`;

    // Escrever arquivo
    await fs.writeFile(demoFilePath, fileContent, 'utf8');
    console.log(`‚úÖ Dados de demonstra√ß√£o atualizados em: ${demoFilePath}`);
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao sincronizar dados de demonstra√ß√£o:', error);
    return false;
  }
}

// Exportar fun√ß√µes individuais para uso espec√≠fico
export { seedServices, syncDemonstrationData };

// Se este arquivo for executado diretamente, executar o seed
if (import.meta.url === `file://${process.argv[1]}`) {
  const force = process.argv.includes('--force');
  const environment = process.env.NODE_ENV || 'development';
  
  seedDatabase({ force, environment })
    .then(() => {
      console.log('‚úÖ Script de seed conclu√≠do com sucesso!');
      process.exit(0);
    })
    .catch(error => {
      console.error('‚ùå Erro durante execu√ß√£o do script de seed:', error);
      process.exit(1);
    });
}
