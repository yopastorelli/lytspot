/**
 * Script para diagn√≥stico e corre√ß√£o do erro 500 na API
 * @description Verifica e corrige problemas comuns que podem causar erro 500
 * @version 1.0.0 - 2025-03-12
 */

import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

// Configura√ß√£o para obter o diret√≥rio atual
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.resolve(__dirname, '..', '..');
const serverDir = path.resolve(__dirname, '..');

/**
 * Verifica se um arquivo existe
 * @param {string} filePath Caminho do arquivo
 * @returns {Promise<boolean>} Verdadeiro se o arquivo existir
 */
async function fileExists(filePath) {
  try {
    await fs.access(filePath);
    return true;
  } catch {
    return false;
  }
}

/**
 * Verifica e corrige o arquivo de demonstra√ß√£o para o simulador de pre√ßos
 */
async function fixDemonstrationData() {
  try {
    console.log('üîÑ Verificando dados de demonstra√ß√£o para o simulador de pre√ßos...');
    
    // Caminho para o arquivo de dados de demonstra√ß√£o
    const demoDataPath = path.join(serverDir, 'data', 'servicos-demonstracao.json');
    const demoDataDir = path.dirname(demoDataPath);
    
    // Verificar se o diret√≥rio existe
    if (!(await fileExists(demoDataDir))) {
      console.log(`üìÅ Criando diret√≥rio: ${demoDataDir}`);
      await fs.mkdir(demoDataDir, { recursive: true });
    }
    
    // Verificar se o arquivo existe
    if (!(await fileExists(demoDataPath))) {
      console.log(`üìù Criando arquivo de dados de demonstra√ß√£o: ${demoDataPath}`);
      
      // Dados de demonstra√ß√£o b√°sicos
      const demoData = [
        {
          id: 1,
          nome: "Ensaio Fotogr√°fico Pessoal",
          descricao: "Sess√£o fotogr√°fica individual para capturar sua melhor vers√£o, com dire√ß√£o profissional e tratamento b√°sico de imagem.",
          preco_base: 350,
          duracao_media_captura: "1 hora",
          duracao_media_tratamento: "3 dias",
          entregaveis: "20 fotos tratadas em alta resolu√ß√£o",
          possiveis_adicionais: "Maquiagem profissional, Loca√ß√£o especial, Fotos adicionais",
          valor_deslocamento: "R$ 50 por local adicional"
        },
        {
          id: 2,
          nome: "Ensaio Fotogr√°fico Casal",
          descricao: "Sess√£o fotogr√°fica para casais, ideal para registrar momentos especiais com seu parceiro(a).",
          preco_base: 450,
          duracao_media_captura: "1.5 horas",
          duracao_media_tratamento: "4 dias",
          entregaveis: "25 fotos tratadas em alta resolu√ß√£o",
          possiveis_adicionais: "Maquiagem profissional, Loca√ß√£o especial, Fotos adicionais",
          valor_deslocamento: "R$ 50 por local adicional"
        },
        {
          id: 3,
          nome: "Ensaio Fotogr√°fico Fam√≠lia",
          descricao: "Sess√£o fotogr√°fica para fam√≠lias, perfeita para registrar momentos especiais com seus entes queridos.",
          preco_base: 550,
          duracao_media_captura: "2 horas",
          duracao_media_tratamento: "5 dias",
          entregaveis: "30 fotos tratadas em alta resolu√ß√£o",
          possiveis_adicionais: "Maquiagem profissional, Loca√ß√£o especial, Fotos adicionais",
          valor_deslocamento: "R$ 70 por local adicional"
        }
      ];
      
      // Escrever arquivo
      await fs.writeFile(demoDataPath, JSON.stringify(demoData, null, 2), 'utf8');
      console.log('‚úÖ Arquivo de dados de demonstra√ß√£o criado com sucesso');
    } else {
      console.log('‚úÖ Arquivo de dados de demonstra√ß√£o j√° existe');
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao verificar/criar dados de demonstra√ß√£o:', error);
    return false;
  }
}

/**
 * Verifica e corrige o problema de fallback para dados de demonstra√ß√£o no servi√ßo de pre√ßos
 */
async function fixPricingService() {
  try {
    console.log('üîÑ Verificando servi√ßo de pre√ßos...');
    
    // Caminho para o arquivo de servi√ßo
    const servicePath = path.join(serverDir, 'services', 'pricingService.js');
    
    // Verificar se o arquivo existe
    if (await fileExists(servicePath)) {
      console.log('üìù Atualizando servi√ßo de pre√ßos para garantir fallback para dados de demonstra√ß√£o...');
      
      // Ler conte√∫do atual
      const content = await fs.readFile(servicePath, 'utf8');
      
      // Verificar se j√° tem o m√©todo getDemonstrationData
      if (!content.includes('getDemonstrationData')) {
        console.log('‚ö†Ô∏è M√©todo getDemonstrationData n√£o encontrado. Adicionando...');
        
        // Adicionar m√©todo getDemonstrationData
        const updatedContent = content.replace(
          'export default new PricingService();',
          `  /**
   * Obt√©m dados de demonstra√ß√£o para o simulador de pre√ßos
   * @returns {Array} Dados de demonstra√ß√£o
   */
  getDemonstrationData() {
    try {
      // Tentar carregar dados de demonstra√ß√£o do arquivo
      const demoDataPath = path.join(process.cwd(), 'server', 'data', 'servicos-demonstracao.json');
      const demoData = JSON.parse(fs.readFileSync(demoDataPath, 'utf8'));
      return demoData;
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao carregar dados de demonstra√ß√£o do arquivo:', error.message);
      
      // Fallback para dados hardcoded
      return [
        {
          id: 1,
          nome: "Ensaio Fotogr√°fico Pessoal",
          descricao: "Sess√£o fotogr√°fica individual para capturar sua melhor vers√£o, com dire√ß√£o profissional e tratamento b√°sico de imagem.",
          preco_base: 350,
          duracao_media_captura: "1 hora",
          duracao_media_tratamento: "3 dias",
          entregaveis: "20 fotos tratadas em alta resolu√ß√£o",
          possiveis_adicionais: "Maquiagem profissional, Loca√ß√£o especial, Fotos adicionais",
          valor_deslocamento: "R$ 50 por local adicional"
        },
        {
          id: 2,
          nome: "Ensaio Fotogr√°fico Casal",
          descricao: "Sess√£o fotogr√°fica para casais, ideal para registrar momentos especiais com seu parceiro(a).",
          preco_base: 450,
          duracao_media_captura: "1.5 horas",
          duracao_media_tratamento: "4 dias",
          entregaveis: "25 fotos tratadas em alta resolu√ß√£o",
          possiveis_adicionais: "Maquiagem profissional, Loca√ß√£o especial, Fotos adicionais",
          valor_deslocamento: "R$ 50 por local adicional"
        },
        {
          id: 3,
          nome: "Ensaio Fotogr√°fico Fam√≠lia",
          descricao: "Sess√£o fotogr√°fica para fam√≠lias, perfeita para registrar momentos especiais com seus entes queridos.",
          preco_base: 550,
          duracao_media_captura: "2 horas",
          duracao_media_tratamento: "5 dias",
          entregaveis: "30 fotos tratadas em alta resolu√ß√£o",
          possiveis_adicionais: "Maquiagem profissional, Loca√ß√£o especial, Fotos adicionais",
          valor_deslocamento: "R$ 70 por local adicional"
        }
      ];
    }
  }

export default new PricingService();`
        );
        
        // Escrever arquivo atualizado
        await fs.writeFile(servicePath, updatedContent, 'utf8');
        console.log('‚úÖ Servi√ßo de pre√ßos atualizado com sucesso');
      } else {
        console.log('‚úÖ M√©todo getDemonstrationData j√° existe no servi√ßo de pre√ßos');
      }
    } else {
      console.error('‚ùå Arquivo de servi√ßo de pre√ßos n√£o encontrado');
      return false;
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao verificar/atualizar servi√ßo de pre√ßos:', error);
    return false;
  }
}

/**
 * Verifica e corrige o controlador de pre√ßos para garantir tratamento adequado de erros
 */
async function fixPricingController() {
  try {
    console.log('üîÑ Verificando controlador de pre√ßos...');
    
    // Caminho para o arquivo de controlador
    const controllerPath = path.join(serverDir, 'controllers', 'pricingController.js');
    
    // Verificar se o arquivo existe
    if (await fileExists(controllerPath)) {
      console.log('üìù Atualizando controlador de pre√ßos para melhorar tratamento de erros...');
      
      // Ler conte√∫do atual
      const content = await fs.readFile(controllerPath, 'utf8');
      
      // Verificar se j√° tem tratamento de erro adequado
      if (!content.includes('getDemonstrationData')) {
        console.log('‚ö†Ô∏è Tratamento de erro com dados de demonstra√ß√£o n√£o encontrado. Atualizando...');
        
        // Atualizar m√©todo getAllServices para incluir fallback para dados de demonstra√ß√£o
        const updatedContent = content.replace(
          /getAllServices: async \(req, res\) => {[\s\S]*?try {[\s\S]*?const services = await pricingService\.getAllServices\(options\);[\s\S]*?return res\.json\(services\);[\s\S]*?} catch \(error\) {[\s\S]*?console\.error\('Erro ao buscar servi√ßos:', error\);[\s\S]*?return res\.status\(500\)\.json\({ message: 'Erro ao buscar servi√ßos', error: error\.message }\);[\s\S]*?}/,
          `getAllServices: async (req, res) => {
    try {
      // Validar e normalizar par√¢metros de consulta
      const queryParams = serviceValidator.validateQueryParams(req.query);
      
      // Preparar op√ß√µes para a consulta
      const options = {
        orderBy: { [queryParams.sortBy]: queryParams.sortOrder },
        take: queryParams.limit,
        skip: (queryParams.page - 1) * queryParams.limit
      };
      
      // Adicionar filtros se necess√°rio
      if (queryParams.search) {
        options.where = {
          OR: [
            { nome: { contains: queryParams.search, mode: 'insensitive' } },
            { descricao: { contains: queryParams.search, mode: 'insensitive' } }
          ]
        };
      }
      
      if (queryParams.minPrice || queryParams.maxPrice) {
        options.where = options.where || {};
        options.where.preco_base = {};
        
        if (queryParams.minPrice) {
          options.where.preco_base.gte = queryParams.minPrice;
        }
        
        if (queryParams.maxPrice) {
          options.where.preco_base.lte = queryParams.maxPrice;
        }
      }
      
      try {
        // Tentar buscar servi√ßos do banco de dados
        const services = await pricingService.getAllServices(options);
        return res.json(services);
      } catch (dbError) {
        console.error('Erro ao buscar servi√ßos do banco de dados:', dbError);
        
        // Fallback para dados de demonstra√ß√£o
        console.log('Usando dados de demonstra√ß√£o como fallback...');
        const demoServices = pricingService.getDemonstrationData();
        
        if (demoServices && demoServices.length > 0) {
          return res.json(demoServices);
        } else {
          throw new Error('N√£o foi poss√≠vel obter dados de demonstra√ß√£o');
        }
      }
    } catch (error) {
      console.error('Erro ao buscar servi√ßos:', error);
      return res.status(500).json({ message: 'Erro ao buscar servi√ßos', error: error.message });
    }`
        );
        
        // Escrever arquivo atualizado
        await fs.writeFile(controllerPath, updatedContent, 'utf8');
        console.log('‚úÖ Controlador de pre√ßos atualizado com sucesso');
      } else {
        console.log('‚úÖ Tratamento de erro com dados de demonstra√ß√£o j√° existe no controlador');
      }
    } else {
      console.error('‚ùå Arquivo de controlador de pre√ßos n√£o encontrado');
      return false;
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao verificar/atualizar controlador de pre√ßos:', error);
    return false;
  }
}

/**
 * Fun√ß√£o principal
 */
async function main() {
  console.log('üöÄ Iniciando diagn√≥stico e corre√ß√£o do erro 500 na API...\n');
  
  try {
    // Verificar e corrigir dados de demonstra√ß√£o
    await fixDemonstrationData();
    
    // Verificar e corrigir servi√ßo de pre√ßos
    await fixPricingService();
    
    // Verificar e corrigir controlador de pre√ßos
    await fixPricingController();
    
    console.log('\n‚úÖ Diagn√≥stico e corre√ß√£o conclu√≠dos com sucesso!');
    console.log('‚úÖ Agora a API deve funcionar corretamente, mesmo sem acesso ao banco de dados.');
    console.log('‚úÖ O simulador de pre√ßos usar√° dados de demonstra√ß√£o como fallback em caso de erro.');
    
    return true;
  } catch (error) {
    console.error('\n‚ùå Erro durante diagn√≥stico e corre√ß√£o:', error);
    return false;
  }
}

// Executar a fun√ß√£o principal se este arquivo for executado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  main()
    .then(success => {
      console.log(`\n${success ? '‚úÖ Corre√ß√£o conclu√≠da com sucesso!' : '‚ùå N√£o foi poss√≠vel corrigir todos os problemas.'}`);
      process.exit(success ? 0 : 1);
    })
    .catch(error => {
      console.error('‚ùå Erro fatal durante execu√ß√£o do script:', error);
      process.exit(1);
    });
}
