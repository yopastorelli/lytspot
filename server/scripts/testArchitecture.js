/**
 * Script de teste da nova arquitetura
 * @description Verifica se todos os componentes da nova arquitetura est√£o funcionando corretamente
 * @version 1.0.0 - 2025-03-12
 */

import pricingService from '../services/pricingService.js';
import serviceRepository from '../repositories/serviceRepository.js';
import serviceTransformer from '../transformers/serviceTransformer.js';
import { seedDatabase } from '../models/seeds/index.js';
import environment from '../config/environment.js';

/**
 * Testa a camada de reposit√≥rio
 */
async function testRepository() {
  console.log('\nüß™ Testando camada de reposit√≥rio...');
  
  try {
    // Testar contagem
    const count = await serviceRepository.count();
    console.log(`‚úÖ Contagem de servi√ßos: ${count}`);
    
    // Testar busca de todos os servi√ßos
    const services = await serviceRepository.findAll();
    console.log(`‚úÖ Busca de servi√ßos: ${services.length} servi√ßos encontrados`);
    
    // Testar busca por ID (se houver servi√ßos)
    if (services.length > 0) {
      const firstService = services[0];
      const serviceById = await serviceRepository.findById(firstService.id);
      console.log(`‚úÖ Busca por ID: Servi√ßo "${serviceById.nome}" encontrado`);
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao testar reposit√≥rio:', error);
    return false;
  }
}

/**
 * Testa a camada de transformador
 */
async function testTransformer() {
  console.log('\nüß™ Testando camada de transformador...');
  
  try {
    // Obter um servi√ßo do reposit√≥rio para testar
    const services = await serviceRepository.findAll({ take: 1 });
    
    if (services.length === 0) {
      console.log('‚ö†Ô∏è Nenhum servi√ßo encontrado para testar o transformador');
      return true;
    }
    
    const service = services[0];
    
    // Testar transforma√ß√£o para formato do simulador
    const transformedService = serviceTransformer.toSimulatorFormat(service);
    console.log('‚úÖ Transforma√ß√£o para formato do simulador:');
    console.log(`   - Nome: ${transformedService.nome}`);
    console.log(`   - Pre√ßo base: ${transformedService.preco_base}`);
    console.log(`   - Dura√ß√£o m√©dia: ${transformedService.duracao_media}`);
    
    // Testar transforma√ß√£o para formato do banco de dados
    const dbFormat = serviceTransformer.toDatabaseFormat(transformedService);
    console.log('‚úÖ Transforma√ß√£o para formato do banco de dados:');
    console.log(`   - Nome: ${dbFormat.nome}`);
    console.log(`   - Pre√ßo base: ${dbFormat.preco_base}`);
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao testar transformador:', error);
    return false;
  }
}

/**
 * Testa a camada de servi√ßo
 */
async function testService() {
  console.log('\nüß™ Testando camada de servi√ßo...');
  
  try {
    // Testar busca de todos os servi√ßos
    const services = await pricingService.getAllServices();
    console.log(`‚úÖ Busca de servi√ßos: ${services.length} servi√ßos encontrados`);
    
    // Testar dados de demonstra√ß√£o
    const demoData = pricingService.getDemonstrationData();
    console.log(`‚úÖ Dados de demonstra√ß√£o: ${demoData.length} servi√ßos encontrados`);
    
    // Testar busca por ID (se houver servi√ßos)
    if (services.length > 0) {
      const firstService = services[0];
      const serviceById = await pricingService.getServiceById(firstService.id);
      console.log(`‚úÖ Busca por ID: Servi√ßo "${serviceById.nome}" encontrado`);
      
      // Testar c√°lculo de pre√ßo
      const priceCalculation = await pricingService.calculatePrice(firstService.id, {});
      console.log(`‚úÖ C√°lculo de pre√ßo: ${priceCalculation.totalPrice}`);
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao testar servi√ßo:', error);
    return false;
  }
}

/**
 * Testa o m√≥dulo de ambiente
 */
function testEnvironment() {
  console.log('\nüß™ Testando m√≥dulo de ambiente...');
  
  try {
    console.log(`‚úÖ Ambiente: ${environment.NODE_ENV}`);
    console.log(`‚úÖ URL da API: ${environment.getApiUrl()}`);
    console.log(`‚úÖ Origens permitidas: ${environment.getAllowedOrigins()}`);
    console.log(`‚úÖ Diret√≥rio est√°tico: ${environment.getStaticDir()}`);
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao testar m√≥dulo de ambiente:', error);
    return false;
  }
}

/**
 * Fun√ß√£o principal
 */
async function main() {
  console.log('üöÄ Iniciando teste da nova arquitetura...');
  
  try {
    // Verificar se h√° servi√ßos no banco de dados
    const count = await serviceRepository.count();
    
    // Se n√£o houver servi√ßos, executar seed
    if (count === 0) {
      console.log('‚ö†Ô∏è Nenhum servi√ßo encontrado no banco de dados. Executando seed...');
      await seedDatabase({
        force: true,
        environment: 'development',
        syncDemoData: true
      });
    }
    
    // Testar cada camada
    const envResult = testEnvironment();
    const repoResult = await testRepository();
    const transformerResult = await testTransformer();
    const serviceResult = await testService();
    
    // Verificar resultados
    const allPassed = envResult && repoResult && transformerResult && serviceResult;
    
    if (allPassed) {
      console.log('\n‚úÖ Todos os testes passaram! A nova arquitetura est√° funcionando corretamente.');
    } else {
      console.error('\n‚ùå Alguns testes falharam. Verifique os erros acima.');
    }
    
    return allPassed;
  } catch (error) {
    console.error('‚ùå Erro durante execu√ß√£o dos testes:', error);
    return false;
  }
}

// Executar a fun√ß√£o principal se este arquivo for executado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  main()
    .then(success => {
      console.log(`\n${success ? '‚úÖ Teste conclu√≠do com sucesso!' : '‚ùå Teste conclu√≠do com erros.'}`);
      process.exit(success ? 0 : 1);
    })
    .catch(error => {
      console.error('‚ùå Erro fatal durante execu√ß√£o do teste:', error);
      process.exit(1);
    });
}
