/**
 * Script para testar a API de servi√ßos usando Axios
 * @version 1.0.0 - 2025-03-14
 * @description Testa a API de servi√ßos diretamente usando Axios
 */

import axios from 'axios';

/**
 * Fun√ß√£o para testar a API de servi√ßos
 */
async function testarApi() {
  try {
    console.log('üöÄ Iniciando teste da API de servi√ßos...');
    
    // URL da API
    const apiUrl = 'http://localhost:3000/api/pricing';
    console.log(`üì° Fazendo requisi√ß√£o para: ${apiUrl}`);
    
    // Fazer requisi√ß√£o para a API
    const response = await axios.get(apiUrl);
    
    // Verificar resposta
    if (response.status === 200) {
      console.log(`‚úÖ Requisi√ß√£o bem-sucedida! Status: ${response.status}`);
      
      // Verificar dados retornados
      const servicos = response.data;
      console.log(`‚úÖ Total de servi√ßos retornados: ${servicos.length}`);
      
      if (servicos.length > 0) {
        // Mostrar exemplo do primeiro servi√ßo
        console.log('\nExemplo de servi√ßo retornado pela API:');
        const exemploServico = servicos[0];
        console.log(JSON.stringify(exemploServico, null, 2));
        
        // Verificar se o campo detalhes est√° presente e tem a estrutura esperada
        if (exemploServico.detalhes) {
          console.log('\nVerifica√ß√£o da estrutura do campo detalhes:');
          console.log('- Campo captura:', exemploServico.detalhes.captura ? '‚úÖ Presente' : '‚ùå Ausente');
          console.log('- Campo tratamento:', exemploServico.detalhes.tratamento ? '‚úÖ Presente' : '‚ùå Ausente');
          console.log('- Campo entregaveis:', exemploServico.detalhes.entregaveis ? '‚úÖ Presente' : '‚ùå Ausente');
          console.log('- Campo adicionais:', exemploServico.detalhes.adicionais ? '‚úÖ Presente' : '‚ùå Ausente');
          console.log('- Campo deslocamento:', exemploServico.detalhes.deslocamento ? '‚úÖ Presente' : '‚ùå Ausente');
        } else {
          console.log('\n‚ùå Campo detalhes ausente no servi√ßo retornado pela API!');
        }
      } else {
        console.log('‚ùå Nenhum servi√ßo retornado pela API.');
      }
    } else {
      console.error(`‚ùå Erro na requisi√ß√£o! Status: ${response.status}`);
    }
  } catch (error) {
    console.error('‚ùå Erro ao testar API:', error.message);
    
    // Verificar se o erro √© de conex√£o recusada
    if (error.code === 'ECONNREFUSED') {
      console.log('\n‚ö†Ô∏è N√£o foi poss√≠vel conectar ao servidor. Verifique se o servidor est√° em execu√ß√£o na porta 3000.');
    }
    
    // Verificar se h√° dados de resposta
    if (error.response) {
      console.log(`\n‚ö†Ô∏è Status do erro: ${error.response.status}`);
      console.log('‚ö†Ô∏è Dados do erro:', error.response.data);
    }
  }
}

// Executar a fun√ß√£o
testarApi()
  .catch((error) => {
    console.error('‚ùå Erro durante a execu√ß√£o:', error);
    process.exit(1);
  });
