/**
 * Script para testar a API de servi√ßos de forma simples
 * @version 1.0.0 - 2025-03-14
 */

import { PrismaClient } from '@prisma/client';
import serviceTransformer from '../transformers/serviceTransformer.js';

// Cliente Prisma para acesso ao banco de dados
const prisma = new PrismaClient();

/**
 * Fun√ß√£o para testar a transforma√ß√£o dos servi√ßos
 */
async function testarTransformacaoServicos() {
  try {
    console.log('üîç Consultando servi√ßos no banco de dados...');
    
    // Buscar servi√ßos diretamente do banco
    const servicos = await prisma.servico.findMany();
    console.log(`‚úÖ Total de servi√ßos encontrados no banco: ${servicos.length}`);
    
    if (servicos.length > 0) {
      // Mostrar exemplo do primeiro servi√ßo
      console.log('\nExemplo de servi√ßo do banco:');
      const exemploServico = { ...servicos[0] };
      
      // Tentar fazer parse do campo detalhes para exibi√ß√£o
      try {
        if (typeof exemploServico.detalhes === 'string') {
          exemploServico.detalhes = JSON.parse(exemploServico.detalhes);
        }
      } catch (error) {
        console.log('Erro ao fazer parse do campo detalhes para exibi√ß√£o:', error.message);
      }
      
      console.log(JSON.stringify(exemploServico, null, 2));
      
      // Transformar servi√ßos para o formato do simulador
      console.log('\nTransformando servi√ßos para o formato do simulador...');
      const servicosTransformados = serviceTransformer.toSimulatorFormatList(servicos);
      console.log(`‚úÖ Total de servi√ßos transformados: ${servicosTransformados.length}`);
      
      // Mostrar exemplo do primeiro servi√ßo transformado
      if (servicosTransformados.length > 0) {
        console.log('\nExemplo de servi√ßo transformado:');
        const exemploTransformado = { ...servicosTransformados[0] };
        console.log(JSON.stringify(exemploTransformado, null, 2));
        
        // Verificar se o campo detalhes est√° presente e tem a estrutura esperada
        if (exemploTransformado.detalhes) {
          console.log('\nVerifica√ß√£o da estrutura do campo detalhes:');
          console.log('- Campo captura:', exemploTransformado.detalhes.captura ? '‚úÖ Presente' : '‚ùå Ausente');
          console.log('- Campo tratamento:', exemploTransformado.detalhes.tratamento ? '‚úÖ Presente' : '‚ùå Ausente');
          console.log('- Campo entregaveis:', exemploTransformado.detalhes.entregaveis ? '‚úÖ Presente' : '‚ùå Ausente');
          console.log('- Campo adicionais:', exemploTransformado.detalhes.adicionais ? '‚úÖ Presente' : '‚ùå Ausente');
          console.log('- Campo deslocamento:', exemploTransformado.detalhes.deslocamento ? '‚úÖ Presente' : '‚ùå Ausente');
        } else {
          console.log('\n‚ùå Campo detalhes ausente no servi√ßo transformado!');
        }
      }
    } else {
      console.log('‚ùå Nenhum servi√ßo encontrado no banco de dados.');
    }
  } catch (error) {
    console.error('‚ùå Erro ao testar transforma√ß√£o de servi√ßos:', error);
  } finally {
    // Fechar conex√£o com o banco de dados
    await prisma.$disconnect();
  }
}

// Executar a fun√ß√£o
testarTransformacaoServicos()
  .catch((error) => {
    console.error('‚ùå Erro durante a execu√ß√£o:', error);
    process.exit(1);
  });
