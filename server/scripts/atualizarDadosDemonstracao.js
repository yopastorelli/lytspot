/**
 * Script para sincronizar dados de demonstra√ß√£o com o banco de dados
 * @version 1.0.1 - 2025-03-13
 * @description Atualiza os dados de demonstra√ß√£o com base nos servi√ßos atuais do banco de dados
 * Este script pode ser executado como parte do processo de build no Render
 */

import { PrismaClient } from '@prisma/client';
import fs from 'fs/promises';
import path from 'path';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';

// Configura√ß√£o do ambiente
dotenv.config();
const prisma = new PrismaClient();

// Obter o diret√≥rio atual
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Verificar se estamos em ambiente de build (Render)
const isRenderBuild = process.env.RENDER === 'true' || process.argv.includes('--build');

/**
 * Fun√ß√£o principal para atualizar dados de demonstra√ß√£o
 */
async function atualizarDadosDemonstracao() {
  try {
    console.log('\nüîÑ Iniciando sincroniza√ß√£o dos dados de demonstra√ß√£o...\n');
    
    // Verificar conex√£o com o banco de dados
    try {
      const totalServicos = await prisma.servico.count();
      console.log(`‚úÖ Conex√£o com banco de dados estabelecida. Total de servi√ßos: ${totalServicos}`);
    } catch (error) {
      console.error('‚ùå Erro ao conectar ao banco de dados:', error.message);
      if (isRenderBuild) {
        console.log('‚ö†Ô∏è Executando em ambiente de build, continuando com dados existentes...');
      } else {
        return;
      }
    }
    
    // Obter servi√ßos do banco de dados
    let servicos = [];
    try {
      servicos = await prisma.servico.findMany({
        orderBy: { id: 'asc' }
      });
      
      if (servicos.length === 0 && !isRenderBuild) {
        console.error('‚ùå Nenhum servi√ßo encontrado no banco de dados.');
        return;
      } else if (servicos.length === 0 && isRenderBuild) {
        console.log('‚ö†Ô∏è Nenhum servi√ßo encontrado no banco de dados. Usando dados de seed...');
        // Importar defini√ß√µes de servi√ßo do arquivo de seed
        try {
          const { serviceDefinitions } = await import('../models/seeds/serviceDefinitions.js');
          servicos = serviceDefinitions.map(servico => ({
            id: servico.id || Math.floor(Math.random() * 1000),
            ...servico
          }));
          console.log(`‚úÖ Carregados ${servicos.length} servi√ßos dos dados de seed.`);
        } catch (seedError) {
          console.error('‚ùå Erro ao carregar dados de seed:', seedError.message);
          return;
        }
      }
    } catch (error) {
      if (isRenderBuild) {
        console.log('‚ö†Ô∏è Erro ao buscar servi√ßos, tentando usar dados de seed...');
        try {
          const { serviceDefinitions } = await import('../models/seeds/serviceDefinitions.js');
          servicos = serviceDefinitions.map(servico => ({
            id: servico.id || Math.floor(Math.random() * 1000),
            ...servico
          }));
          console.log(`‚úÖ Carregados ${servicos.length} servi√ßos dos dados de seed.`);
        } catch (seedError) {
          console.error('‚ùå Erro ao carregar dados de seed:', seedError.message);
          return;
        }
      } else {
        console.error('‚ùå Erro ao buscar servi√ßos:', error.message);
        return;
      }
    }
    
    console.log(`üìã Processando ${servicos.length} servi√ßos para sincroniza√ß√£o.`);
    
    // Caminho para o arquivo de dados de demonstra√ß√£o
    const dadosDemonstracaoPath = path.resolve(__dirname, '../models/dadosDemonstracao.js');
    
    // Verificar se o arquivo existe
    try {
      await fs.access(dadosDemonstracaoPath);
      console.log(`‚úÖ Arquivo de dados de demonstra√ß√£o encontrado: ${dadosDemonstracaoPath}`);
    } catch (error) {
      console.log('üîÑ Criando novo arquivo de dados de demonstra√ß√£o...');
    }
    
    // Formatar os servi√ßos para o formato de dados de demonstra√ß√£o
    const servicosFormatados = servicos.map(servico => {
      return {
        id: servico.id,
        nome: servico.nome,
        descricao: servico.descricao,
        preco_base: servico.preco_base,
        duracao_media_captura: servico.duracao_media_captura,
        duracao_media_tratamento: servico.duracao_media_tratamento,
        entregaveis: servico.entregaveis,
        ativo: servico.ativo !== undefined ? servico.ativo : true
      };
    });
    
    // Criar o conte√∫do do arquivo
    const conteudoArquivo = `/**
 * Dados de demonstra√ß√£o para servi√ßos
 * @version 1.0.1 - ${new Date().toISOString().split('T')[0]}
 * @description Dados de fallback para quando o banco de dados n√£o est√° dispon√≠vel
 * ATEN√á√ÉO: Este arquivo √© gerado automaticamente pelo script atualizarDadosDemonstracao.js
 * N√£o edite manualmente!
 */

export const dadosDemonstracao = {
  servicos: ${JSON.stringify(servicosFormatados, null, 2)}
};
`;
    
    // Salvar o arquivo
    await fs.writeFile(dadosDemonstracaoPath, conteudoArquivo, 'utf8');
    
    console.log('‚úÖ Dados de demonstra√ß√£o atualizados com sucesso!');
    
    // Atualizar tamb√©m o arquivo de servi√ßos para o simulador
    const servicosSimuladorPath = path.resolve(__dirname, '../../src/data/servicos.js');
    
    try {
      // Verificar se o diret√≥rio existe, se n√£o, criar
      const servicosDir = path.dirname(servicosSimuladorPath);
      try {
        await fs.access(servicosDir);
      } catch (dirError) {
        await fs.mkdir(servicosDir, { recursive: true });
        console.log(`‚úÖ Diret√≥rio criado: ${servicosDir}`);
      }
      
      // Criar o conte√∫do do arquivo
      const conteudoSimulador = `/**
 * Dados de servi√ßos para o simulador
 * @version 1.0.1 - ${new Date().toISOString().split('T')[0]}
 * @description Dados para o simulador de pre√ßos
 * ATEN√á√ÉO: Este arquivo √© gerado automaticamente pelo script atualizarDadosDemonstracao.js
 * N√£o edite manualmente!
 */

export const servicos = ${JSON.stringify(servicosFormatados, null, 2)};
`;
      
      // Salvar o arquivo
      await fs.writeFile(servicosSimuladorPath, conteudoSimulador, 'utf8');
      
      console.log('‚úÖ Dados do simulador atualizados com sucesso!');
    } catch (error) {
      console.error('‚ùå Erro ao atualizar arquivo de servi√ßos do simulador:', error.message);
      if (isRenderBuild) {
        console.log('‚ö†Ô∏è Continuando processo de build...');
      }
    }
    
    console.log('\n‚ú® Sincroniza√ß√£o conclu√≠da com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro durante a execu√ß√£o:', error);
    if (isRenderBuild) {
      console.log('‚ö†Ô∏è Erro durante o build, mas continuando o processo...');
    }
  } finally {
    await prisma.$disconnect();
  }
}

// Executar a fun√ß√£o principal
atualizarDadosDemonstracao()
  .then(() => {
    console.log('‚úÖ Script finalizado com sucesso.');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Erro fatal:', error);
    // Em ambiente de build, n√£o queremos que o erro interrompa o processo
    if (isRenderBuild) {
      console.log('‚ö†Ô∏è Erro durante o build, mas continuando o processo...');
      process.exit(0);
    } else {
      process.exit(1);
    }
  });
