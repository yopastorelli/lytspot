/**
 * Script para limpar duplica√ß√µes de servi√ßos no banco de dados
 * @version 1.0.0 - 2025-03-13
 * @description Remove servi√ßos duplicados e mant√©m apenas os mais recentes
 */

import { PrismaClient } from '@prisma/client';
import dotenv from 'dotenv';

// Configura√ß√£o do ambiente
dotenv.config();
const prisma = new PrismaClient();

async function main() {
  try {
    console.log('üîÑ Iniciando processo de limpeza de duplica√ß√µes de servi√ßos...');
    
    // Verificar conex√£o com o banco de dados
    console.log('üîç Verificando conex√£o com o banco de dados...');
    await prisma.$connect();
    console.log('‚úÖ Conex√£o com banco de dados estabelecida.');
    
    // Consultar todos os servi√ßos
    console.log('üìã Consultando servi√ßos no banco de dados...');
    const servicos = await prisma.servico.findMany({
      orderBy: { id: 'asc' }
    });
    
    console.log(`üìã Total de servi√ßos encontrados: ${servicos.length}`);
    
    // Identificar servi√ßos a serem mantidos (IDs 1-8) e removidos (IDs > 8)
    const servicosParaManter = servicos.filter(s => s.id <= 8);
    const servicosParaRemover = servicos.filter(s => s.id > 8);
    
    console.log(`üìã Servi√ßos a serem mantidos: ${servicosParaManter.length}`);
    console.log(`üìã Servi√ßos a serem removidos: ${servicosParaRemover.length}`);
    
    // Exibir informa√ß√µes dos servi√ßos a serem removidos
    if (servicosParaRemover.length > 0) {
      console.log('üìã Servi√ßos que ser√£o removidos:');
      servicosParaRemover.forEach(servico => {
        console.log(`   ID ${servico.id}: ${servico.nome} - R$ ${servico.preco_base.toFixed(2)}`);
      });
      
      // Remover servi√ßos duplicados
      console.log('üßπ Removendo servi√ßos duplicados...');
      
      for (const servico of servicosParaRemover) {
        await prisma.servico.delete({
          where: { id: servico.id }
        });
        console.log(`   ‚úÖ Servi√ßo ID ${servico.id} (${servico.nome}) removido com sucesso.`);
      }
      
      console.log('‚úÖ Todos os servi√ßos duplicados foram removidos.');
    } else {
      console.log('‚úÖ N√£o foram encontrados servi√ßos duplicados para remover.');
    }
    
    // Consultar servi√ßos ap√≥s a limpeza
    const servicosAtualizados = await prisma.servico.findMany({
      orderBy: { id: 'asc' }
    });
    
    console.log(`üìã Total de servi√ßos ap√≥s limpeza: ${servicosAtualizados.length}`);
    console.log('üìã Lista de servi√ßos atual:');
    servicosAtualizados.forEach(servico => {
      console.log(`   ID ${servico.id}: ${servico.nome} - R$ ${servico.preco_base.toFixed(2)}`);
    });
    
    console.log('‚úÖ Processo de limpeza conclu√≠do com sucesso!');
    console.log('‚ö†Ô∏è Para aplicar as altera√ß√µes, reinicie o servidor de desenvolvimento.');
    
  } catch (error) {
    console.error('‚ùå Erro durante o processo:', error);
  } finally {
    await prisma.$disconnect();
  }
}

main();
