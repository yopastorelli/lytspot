/**
 * Script para verificar a API de servi√ßos em produ√ß√£o
 * @version 1.0.0 - 2025-03-14
 * @description Verifica se a API de servi√ßos em produ√ß√£o est√° retornando os dados corretos
 */

import fetch from 'node-fetch';
import { PrismaClient } from '@prisma/client';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';
import fs from 'fs';

// Configura√ß√£o para obter o diret√≥rio atual
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.resolve(__dirname, '..', '..');

// Carregar vari√°veis de ambiente
dotenv.config({ path: path.join(rootDir, '.env') });

// Cliente Prisma para acesso ao banco de dados
const prisma = new PrismaClient();

// URLs da API
const DEV_API_URL = 'http://localhost:3000/api/pricing';
const PROD_API_URL = 'https://lytspot.onrender.com/api/pricing';

/**
 * Compara dois objetos de servi√ßo para verificar se s√£o equivalentes
 * @param {Object} servico1 - Primeiro servi√ßo
 * @param {Object} servico2 - Segundo servi√ßo
 * @returns {boolean} - True se os servi√ßos forem equivalentes
 */
function servicosEquivalentes(servico1, servico2) {
  // Verificar campos principais
  if (servico1.id !== servico2.id || servico1.nome !== servico2.nome) {
    return false;
  }
  
  // Verificar campo detalhes
  const detalhes1 = typeof servico1.detalhes === 'string' 
    ? JSON.parse(servico1.detalhes) 
    : servico1.detalhes;
    
  const detalhes2 = typeof servico2.detalhes === 'string' 
    ? JSON.parse(servico2.detalhes) 
    : servico2.detalhes;
  
  // Verificar campos espec√≠ficos dentro de detalhes
  if (detalhes1 && detalhes2) {
    if (detalhes1.captura !== detalhes2.captura || 
        detalhes1.tratamento !== detalhes2.tratamento) {
      return false;
    }
  }
  
  return true;
}

/**
 * Busca servi√ßos da API
 * @param {string} url - URL da API
 * @returns {Promise<Array>} - Array de servi√ßos
 */
async function buscarServicosApi(url) {
  console.log(`üîç Consultando API: ${url}`);
  
  try {
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    });
    
    if (!response.ok) {
      throw new Error(`Erro na requisi√ß√£o: ${response.status} ${response.statusText}`);
    }
    
    const data = await response.json();
    
    if (!Array.isArray(data)) {
      throw new Error('Resposta inv√°lida: esperava um array de servi√ßos');
    }
    
    console.log(`‚úÖ Sucesso! Recebidos ${data.length} servi√ßos da API.`);
    return data;
  } catch (error) {
    console.error(`‚ùå Erro ao consultar API ${url}:`, error.message);
    return null;
  }
}

/**
 * Busca servi√ßos do banco de dados
 * @returns {Promise<Array>} - Array de servi√ßos
 */
async function buscarServicosBanco() {
  console.log('üîç Consultando servi√ßos diretamente no banco de dados...');
  
  try {
    const servicos = await prisma.servico.findMany();
    console.log(`‚úÖ Total de servi√ßos encontrados no banco: ${servicos.length}`);
    return servicos;
  } catch (error) {
    console.error('‚ùå Erro ao consultar banco de dados:', error.message);
    return null;
  }
}

/**
 * Verifica a API de servi√ßos em produ√ß√£o
 */
async function verificarApiProducao() {
  console.log('üöÄ Iniciando verifica√ß√£o da API de servi√ßos em produ√ß√£o...');
  
  try {
    // Buscar servi√ßos da API de produ√ß√£o
    const servicosProd = await buscarServicosApi(PROD_API_URL);
    
    if (!servicosProd) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel obter servi√ßos da API de produ√ß√£o.');
      return;
    }
    
    // Buscar servi√ßos da API de desenvolvimento (opcional)
    const servicosDev = await buscarServicosApi(DEV_API_URL);
    
    // Buscar servi√ßos diretamente do banco de dados
    const servicosBanco = await buscarServicosBanco();
    
    if (!servicosBanco) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel obter servi√ßos do banco de dados.');
      return;
    }
    
    // Transformar servi√ßos do banco para o formato do simulador
    const { default: serviceTransformer } = await import('../transformers/serviceTransformer.js');
    const servicosTransformados = serviceTransformer.toSimulatorFormatList(servicosBanco);
    
    console.log('\nüìä Compara√ß√£o de servi√ßos:');
    console.log(`- Servi√ßos na API de produ√ß√£o: ${servicosProd.length}`);
    console.log(`- Servi√ßos transformados do banco: ${servicosTransformados.length}`);
    
    if (servicosDev) {
      console.log(`- Servi√ßos na API de desenvolvimento: ${servicosDev.length}`);
    }
    
    // Verificar se os servi√ßos da API de produ√ß√£o correspondem aos do banco
    console.log('\nüîç Verificando correspond√™ncia entre API de produ√ß√£o e banco de dados...');
    
    // Mapear servi√ßos por ID para facilitar a compara√ß√£o
    const mapaProd = {};
    servicosProd.forEach(servico => {
      mapaProd[servico.id] = servico;
    });
    
    const mapaTransformados = {};
    servicosTransformados.forEach(servico => {
      mapaTransformados[servico.id] = servico;
    });
    
    // Verificar servi√ßos que est√£o em ambos
    const idsComuns = Object.keys(mapaProd).filter(id => mapaTransformados[id]);
    console.log(`‚úÖ Servi√ßos em comum: ${idsComuns.length}`);
    
    // Verificar servi√ßos que est√£o apenas na produ√ß√£o
    const idsSoProd = Object.keys(mapaProd).filter(id => !mapaTransformados[id]);
    console.log(`‚ÑπÔ∏è Servi√ßos apenas na API de produ√ß√£o: ${idsSoProd.length}`);
    
    // Verificar servi√ßos que est√£o apenas no banco
    const idsSoBanco = Object.keys(mapaTransformados).filter(id => !mapaProd[id]);
    console.log(`‚ÑπÔ∏è Servi√ßos apenas no banco de dados: ${idsSoBanco.length}`);
    
    // Verificar diferen√ßas nos servi√ßos comuns
    console.log('\nüîç Verificando diferen√ßas nos servi√ßos comuns...');
    
    let servicosDiferentes = 0;
    let detalhesProblematicos = 0;
    
    for (const id of idsComuns) {
      const servicoProd = mapaProd[id];
      const servicoBanco = mapaTransformados[id];
      
      if (!servicosEquivalentes(servicoProd, servicoBanco)) {
        servicosDiferentes++;
        
        // Verificar especificamente o campo detalhes
        const detalhesProd = typeof servicoProd.detalhes === 'string' 
          ? JSON.parse(servicoProd.detalhes) 
          : servicoProd.detalhes;
          
        const detalhesBanco = typeof servicoBanco.detalhes === 'string' 
          ? JSON.parse(servicoBanco.detalhes) 
          : servicoBanco.detalhes;
        
        if (!detalhesProd || !detalhesBanco || 
            !detalhesProd.captura || !detalhesProd.tratamento ||
            !detalhesBanco.captura || !detalhesBanco.tratamento) {
          detalhesProblematicos++;
          
          console.log(`\n‚ùå Servi√ßo com problema no campo detalhes: ${servicoProd.nome} (ID: ${id})`);
          console.log('API de produ√ß√£o:');
          console.log(JSON.stringify(detalhesProd, null, 2));
          console.log('Banco de dados transformado:');
          console.log(JSON.stringify(detalhesBanco, null, 2));
        }
      }
    }
    
    console.log(`‚ÑπÔ∏è Servi√ßos com diferen√ßas: ${servicosDiferentes}`);
    console.log(`‚ÑπÔ∏è Servi√ßos com problemas no campo detalhes: ${detalhesProblematicos}`);
    
    if (servicosDiferentes === 0) {
      console.log('\n‚úÖ Todos os servi√ßos comuns est√£o id√™nticos entre a API de produ√ß√£o e o banco de dados!');
    } else {
      console.log('\n‚ö†Ô∏è Existem diferen√ßas entre os servi√ßos da API de produ√ß√£o e do banco de dados.');
      console.log('Poss√≠veis causas:');
      console.log('1. Cache da API n√£o foi limpo ap√≥s atualiza√ß√£o');
      console.log('2. A API est√° conectada a um banco de dados diferente');
      console.log('3. Problemas na transforma√ß√£o dos dados');
      
      console.log('\nüí° Sugest√µes:');
      console.log('1. Limpar o cache da API em produ√ß√£o');
      console.log('2. Verificar a conex√£o do banco de dados em produ√ß√£o');
      console.log('3. Executar novamente o script de atualiza√ß√£o de servi√ßos');
    }
    
    // Salvar resultado em um arquivo de log
    const logContent = `
=== Verifica√ß√£o da API de Produ√ß√£o (${new Date().toISOString()}) ===
Servi√ßos na API de produ√ß√£o: ${servicosProd.length}
Servi√ßos transformados do banco: ${servicosTransformados.length}
Servi√ßos em comum: ${idsComuns.length}
Servi√ßos apenas na API de produ√ß√£o: ${idsSoProd.length}
Servi√ßos apenas no banco de dados: ${idsSoBanco.length}
Servi√ßos com diferen√ßas: ${servicosDiferentes}
Servi√ßos com problemas no campo detalhes: ${detalhesProblematicos}
    `;
    
    const logDir = path.join(rootDir, 'server', 'logs');
    
    // Criar diret√≥rio de logs se n√£o existir
    if (!fs.existsSync(logDir)) {
      fs.mkdirSync(logDir, { recursive: true });
    }
    
    fs.writeFileSync(path.join(logDir, 'verificacao-api-producao.log'), logContent, 'utf8');
    
    console.log('\n‚úÖ Verifica√ß√£o conclu√≠da!');
    console.log('üìù Log salvo em server/logs/verificacao-api-producao.log');
  } catch (error) {
    console.error('\n‚ùå Erro durante a verifica√ß√£o:', error);
  } finally {
    // Fechar conex√£o com o banco de dados
    await prisma.$disconnect();
  }
}

// Executar a fun√ß√£o principal
verificarApiProducao()
  .catch((error) => {
    console.error('‚ùå Erro fatal durante execu√ß√£o do script:', error);
    process.exit(1);
  });
