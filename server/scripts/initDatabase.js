/**
 * Script para inicializar o banco de dados
 * @description Garante que o banco de dados SQLite esteja criado e acess√≠vel
 * @version 1.0.0 - 2025-03-12
 */

import { PrismaClient } from '@prisma/client';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

// Configura√ß√£o para obter o diret√≥rio atual
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.resolve(__dirname, '..', '..');

// Carregar vari√°veis de ambiente
dotenv.config({ path: path.join(rootDir, '.env') });

// Definir caminho absoluto para o banco de dados SQLite
const dbPath = path.resolve(rootDir, 'server', 'database.sqlite');
console.log(`üîç Verificando banco de dados em: ${dbPath}`);

// Verificar se o diret√≥rio do banco de dados existe
const dbDir = path.dirname(dbPath);
if (!fs.existsSync(dbDir)) {
  console.log(`üìÅ Criando diret√≥rio: ${dbDir}`);
  fs.mkdirSync(dbDir, { recursive: true });
}

// Verificar se o arquivo do banco de dados existe
if (!fs.existsSync(dbPath)) {
  console.log(`üìÑ Criando arquivo de banco de dados vazio: ${dbPath}`);
  fs.writeFileSync(dbPath, '');
}

// Atualizar a vari√°vel de ambiente DATABASE_URL
process.env.DATABASE_URL = `file:${dbPath}`;
console.log(`üîß DATABASE_URL configurado para: ${process.env.DATABASE_URL}`);

// Inicializar o cliente Prisma
const prisma = new PrismaClient();

async function main() {
  try {
    console.log('üöÄ Inicializando conex√£o com o banco de dados...');
    
    // Testar a conex√£o com o banco de dados
    const result = await prisma.$queryRaw`SELECT 1+1 as result`;
    console.log(`‚úÖ Conex√£o com o banco de dados estabelecida com sucesso!`);
    
    // Verificar se h√° tabelas no banco de dados
    try {
      const servicos = await prisma.servico.count();
      console.log(`üìä Banco de dados cont√©m ${servicos} servi√ßos.`);
    } catch (error) {
      if (error.message.includes('does not exist')) {
        console.log('‚ö†Ô∏è Tabelas n√£o encontradas. Execute o comando de migra√ß√£o do Prisma:');
        console.log('npx prisma migrate dev --name init');
      } else {
        throw error;
      }
    }
    
    console.log('‚úÖ Inicializa√ß√£o do banco de dados conclu√≠da com sucesso!');
  } catch (error) {
    console.error('‚ùå Erro ao inicializar o banco de dados:', error);
    
    if (error.message.includes('Unable to open the database file')) {
      console.error('\n‚ö†Ô∏è N√£o foi poss√≠vel abrir o arquivo do banco de dados. Verificando permiss√µes...');
      
      try {
        // Verificar permiss√µes do arquivo
        const stats = fs.statSync(dbPath);
        console.log(`üìÑ Permiss√µes do arquivo: ${stats.mode.toString(8)}`);
        
        // Tentar recriar o arquivo com permiss√µes expl√≠citas
        console.log('üîÑ Recriando o arquivo do banco de dados...');
        fs.unlinkSync(dbPath);
        fs.writeFileSync(dbPath, '', { mode: 0o666 }); // Permiss√µes de leitura/escrita para todos
        
        console.log('‚úÖ Arquivo do banco de dados recriado com sucesso!');
        console.log('üîÑ Tente executar o servidor novamente.');
      } catch (fsError) {
        console.error('‚ùå Erro ao manipular o arquivo do banco de dados:', fsError);
      }
    }
  } finally {
    await prisma.$disconnect();
  }
}

main();
