/**
 * Script de Sincroniza√ß√£o do Cat√°logo de Servi√ßos
 * @version 1.0.0 - 2025-03-13
 * @description Atualiza o cat√°logo de servi√ßos em todos os pontos do sistema (banco de dados e frontend)
 */

import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import { PrismaClient } from '@prisma/client';
import dotenv from 'dotenv';

// Configura√ß√£o para ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const rootDir = path.resolve(__dirname, '../..');
const serverDir = path.resolve(__dirname, '..');

// Carregar vari√°veis de ambiente
dotenv.config({ path: path.join(serverDir, '.env') });

// Verificar a URL do banco de dados
console.log(`üìä DATABASE_URL: ${process.env.DATABASE_URL}`);
const dbPath = process.env.DATABASE_URL ? process.env.DATABASE_URL.replace('file:', '') : '';
console.log(`üìä Caminho do banco de dados: ${dbPath}`);

// Atualizar a URL do banco de dados para usar o caminho correto
// Garantir que estamos usando o mesmo banco de dados que o servidor
process.env.DATABASE_URL = 'file:C:\\GIT DESKTOP\\lytspot\\server\\database.sqlite';
console.log(`üìä DATABASE_URL atualizada: ${process.env.DATABASE_URL}`);

// Cliente Prisma
const prisma = new PrismaClient();

// Caminhos para arquivos
const frontendServicesPath = path.join(rootDir, 'src', 'data', 'servicos.js');
const backupDir = path.join(rootDir, 'backups', `${new Date().toISOString().split('T')[0]}`);

// Novos servi√ßos conforme cat√°logo atualizado
const novosServicos = [
  {
    nome: "VLOG - Aventuras em Fam√≠lia",
    descricao: "Documenta√ß√£o em v√≠deo e fotos de aventuras familiares, ideal para viagens, passeios e momentos especiais. Inclui edi√ß√£o profissional e trilha sonora personalizada.",
    preco_base: 1500,
    duracao_media: 8, // Em horas
    detalhes: {
      captura: "6 a 8 horas",
      tratamento: "14 dias √∫teis",
      entregaveis: "V√≠deo editado de 5-7 minutos + 30 fotos em alta resolu√ß√£o",
      adicionais: "Edi√ß√£o Mediana, Edi√ß√£o Avan√ßada",
      deslocamento: "Gratuito at√© 20 km do centro de Curitiba (excedente de R$ 1,50/km)"
    }
  },
  {
    nome: "VLOG - Amigos e Comunidade",
    descricao: "Cobertura fotogr√°fica e de v√≠deo para grupos de amigos ou comunidades, perfeita para registrar viagens, encontros ou eventos colaborativos.",
    preco_base: 900,
    duracao_media: 4, // Em horas
    detalhes: {
      captura: "4 a 6 horas",
      tratamento: "10 dias √∫teis",
      entregaveis: "V√≠deo editado de 3-5 minutos + 25 fotos em alta resolu√ß√£o",
      adicionais: "Edi√ß√£o Mediana, Edi√ß√£o Avan√ßada",
      deslocamento: "Gratuito at√© 20 km do centro de Curitiba (excedente de R$ 1,50/km)"
    }
  },
  {
    nome: "Cobertura Fotogr√°fica de Evento Social",
    descricao: "Registro fotogr√°fico profissional para eventos sociais como anivers√°rios, confraterniza√ß√µes e pequenas celebra√ß√µes. Inclui edi√ß√£o b√°sica e entrega digital.",
    preco_base: 700,
    duracao_media: 4, // Em horas
    detalhes: {
      captura: "3 a 4 horas",
      tratamento: "7 dias √∫teis",
      entregaveis: "50 fotos em alta resolu√ß√£o com edi√ß√£o b√°sica",
      adicionais: "Edi√ß√£o Mediana, Edi√ß√£o Avan√ßada",
      deslocamento: "Gratuito at√© 20 km do centro de Curitiba (excedente de R$ 1,20/km)"
    }
  },
  {
    nome: "Filmagem de Evento Social",
    descricao: "Capta√ß√£o de v√≠deo para eventos sociais, incluindo edi√ß√£o b√°sica com trilha sonora e entrega em formato digital de alta qualidade.",
    preco_base: 800,
    duracao_media: 4, // Em horas
    detalhes: {
      captura: "3 a 4 horas",
      tratamento: "10 dias √∫teis",
      entregaveis: "V√≠deo editado de 3-5 minutos em alta resolu√ß√£o",
      adicionais: "Edi√ß√£o Mediana, Edi√ß√£o Avan√ßada",
      deslocamento: "Gratuito at√© 20 km do centro de Curitiba (excedente de R$ 1,20/km)"
    }
  },
  {
    nome: "Ensaio Fotogr√°fico de Fam√≠lia",
    descricao: "Sess√£o fotogr√°fica para fam√≠lias em loca√ß√£o externa ou est√∫dio, ideal para registrar momentos especiais e criar recorda√ß√µes duradouras.",
    preco_base: 450,
    duracao_media: 2, // Em horas
    detalhes: {
      captura: "1 a 2 horas",
      tratamento: "7 dias √∫teis",
      entregaveis: "20 fotos editadas em alta resolu√ß√£o",
      adicionais: "Edi√ß√£o Mediana, Edi√ß√£o Avan√ßada",
      deslocamento: "Gratuito at√© 20 km do centro de Curitiba (excedente de R$ 1,20/km)"
    }
  },
  {
    nome: "Filmagem A√©rea com Drone",
    descricao: "Capta√ß√£o de v√≠deos a√©reos para im√≥veis, eventos ou projetos especiais, com equipamento profissional e piloto certificado.",
    preco_base: 450,
    duracao_media: 2, // Em horas
    detalhes: {
      captura: "1 a 2 horas",
      tratamento: "7 dias √∫teis",
      entregaveis: "V√≠deo editado de 1-2 minutos em alta resolu√ß√£o",
      adicionais: "Edi√ß√£o Mediana, Edi√ß√£o Avan√ßada",
      deslocamento: "Gratuito at√© 20 km do centro de Curitiba (excedente de R$ 1,50/km)"
    }
  },
  {
    nome: "Fotografia A√©rea com Drone",
    descricao: "Captura de imagens a√©reas de propriedades, eventos ou loca√ß√µes, com equipamento profissional e piloto certificado.",
    preco_base: 350,
    duracao_media: 2, // Em horas
    detalhes: {
      captura: "1 a 2 horas",
      tratamento: "5 dias √∫teis",
      entregaveis: "10 fotos em alta resolu√ß√£o com edi√ß√£o b√°sica",
      adicionais: "Edi√ß√£o Mediana, Edi√ß√£o Avan√ßada",
      deslocamento: "Gratuito at√© 20 km do centro de Curitiba (excedente de R$ 1,50/km)"
    }
  }
];

/**
 * Fun√ß√£o para converter os novos servi√ßos para o formato do banco de dados
 * @returns {Array} Array de objetos no formato esperado pelo Prisma
 */
function converterParaFormatoBancoDados() {
  return novosServicos.map(servico => ({
    nome: servico.nome,
    descricao: servico.descricao,
    preco_base: servico.preco_base,
    duracao_media_captura: servico.detalhes.captura,
    duracao_media_tratamento: servico.detalhes.tratamento,
    entregaveis: servico.detalhes.entregaveis,
    possiveis_adicionais: servico.detalhes.adicionais,
    valor_deslocamento: servico.detalhes.deslocamento
  }));
}

// Vers√£o simplificada dos servi√ßos para o banco de dados
const servicosParaBanco = converterParaFormatoBancoDados();

/**
 * Cria diret√≥rio de backup se n√£o existir
 */
async function criarDiretorioBackup() {
  try {
    await fs.mkdir(backupDir, { recursive: true });
    console.log(`‚úÖ Diret√≥rio de backup criado: ${backupDir}`);
  } catch (error) {
    console.error(`‚ùå Erro ao criar diret√≥rio de backup: ${error.message}`);
    throw error;
  }
}

/**
 * Faz backup de um arquivo
 * @param {string} filePath Caminho do arquivo
 */
async function fazerBackupArquivo(filePath) {
  try {
    const fileName = path.basename(filePath);
    const backupPath = path.join(backupDir, `${fileName}.bak`);
    
    try {
      await fs.access(filePath);
      await fs.copyFile(filePath, backupPath);
      console.log(`‚úÖ Backup criado: ${backupPath}`);
    } catch (error) {
      console.log(`‚ÑπÔ∏è Arquivo original n√£o encontrado, nenhum backup necess√°rio: ${filePath}`);
    }
    
    return backupPath;
  } catch (error) {
    console.error(`‚ùå Erro ao fazer backup do arquivo: ${error.message}`);
    throw error;
  }
}

/**
 * Atualiza o arquivo de servi√ßos do frontend
 */
async function atualizarArquivoFrontend() {
  try {
    console.log('üîÑ Atualizando arquivo de servi√ßos do frontend...');
    
    // Fazer backup do arquivo original
    await fazerBackupArquivo(frontendServicesPath);
    
    // Gerar novo conte√∫do
    const dataAtual = new Date().toISOString().split('T')[0];
    const conteudo = `/**
 * Dados de servi√ßos para o Simulador de Pre√ßos - Vers√£o 2.1
 * Este arquivo centraliza os dados para uso consistente entre a API e o fallback
 * √öltima atualiza√ß√£o: ${dataAtual}
 * ATEN√á√ÉO: Este arquivo √© gerado automaticamente pelo script syncDatabase.js
 * N√£o edite manualmente!
 */

export const servicos = ${JSON.stringify(novosServicos, null, 2)};
`;
    
    // Escrever novo conte√∫do
    await fs.writeFile(frontendServicesPath, conteudo, 'utf8');
    console.log(`‚úÖ Arquivo de servi√ßos do frontend atualizado: ${frontendServicesPath}`);
    
    return true;
  } catch (error) {
    console.error(`‚ùå Erro ao atualizar arquivo de servi√ßos do frontend: ${error.message}`);
    return false;
  }
}

/**
 * Atualiza o banco de dados com os novos servi√ßos
 */
async function atualizarBancoDados() {
  try {
    console.log('üîÑ Atualizando banco de dados...');
    
    // Verificar conex√£o com o banco
    await prisma.$connect();
    console.log('‚úÖ Conex√£o com o banco de dados estabelecida');
    
    // Limpar servi√ßos existentes
    await prisma.servico.deleteMany({});
    console.log('‚úÖ Servi√ßos anteriores removidos com sucesso');
    
    // Inserir novos servi√ßos
    for (const servico of servicosParaBanco) {
      await prisma.servico.create({
        data: servico
      });
    }
    
    console.log(`‚úÖ ${servicosParaBanco.length} servi√ßos inseridos com sucesso no banco de dados!`);
    
    // Verificar se todos os servi√ßos foram inseridos
    const countServicos = await prisma.servico.count();
    console.log(`üìä Total de servi√ßos no banco de dados: ${countServicos}`);
    
    if (countServicos !== servicosParaBanco.length) {
      console.warn(`‚ö†Ô∏è Aten√ß√£o: N√∫mero de servi√ßos no banco (${countServicos}) difere do n√∫mero de servi√ßos atualizados (${servicosParaBanco.length})`);
    }
    
    return true;
  } catch (error) {
    console.error(`‚ùå Erro ao atualizar banco de dados: ${error.message}`);
    return false;
  } finally {
    await prisma.$disconnect();
    console.log('‚úÖ Desconectado do banco de dados');
  }
}

/**
 * Fun√ß√£o principal que orquestra todo o processo
 */
async function sincronizarDados() {
  console.log('=== INICIANDO SINCRONIZA√á√ÉO DE DADOS ===');
  console.log(`Data e hora: ${new Date().toISOString()}`);
  console.log(`Vers√£o: 1.0.0 - 2025-03-13`);
  
  try {
    // Criar diret√≥rio de backup
    await criarDiretorioBackup();
    
    // Atualizar arquivo do frontend
    const frontendAtualizado = await atualizarArquivoFrontend();
    
    if (!frontendAtualizado) {
      console.error('‚ùå Falha ao atualizar arquivo do frontend. Continuando com o banco de dados...');
    }
    
    // Atualizar banco de dados
    const bancoDadosAtualizado = await atualizarBancoDados();
    
    if (!bancoDadosAtualizado) {
      console.error('‚ùå Falha ao atualizar banco de dados.');
    }
    
    // Verificar resultado geral
    if (frontendAtualizado && bancoDadosAtualizado) {
      console.log('‚úÖ Sincroniza√ß√£o de dados conclu√≠da com sucesso!');
    } else {
      console.warn('‚ö†Ô∏è Sincroniza√ß√£o conclu√≠da com avisos ou erros. Verifique os logs acima.');
    }
    
    // Registrar no log de vers√£o
    const logPath = path.join(rootDir, 'logs', 'atualizacoes.log');
    const logMessage = `[${new Date().toISOString()}] Atualiza√ß√£o do cat√°logo de servi√ßos v1.0.0 - ${frontendAtualizado ? 'Frontend OK' : 'Frontend FALHA'} - ${bancoDadosAtualizado ? 'Banco OK' : 'Banco FALHA'}\n`;
    
    try {
      await fs.mkdir(path.dirname(logPath), { recursive: true });
      await fs.appendFile(logPath, logMessage, 'utf8');
      console.log(`‚úÖ Log de atualiza√ß√£o registrado: ${logPath}`);
    } catch (error) {
      console.error(`‚ùå Erro ao registrar log de atualiza√ß√£o: ${error.message}`);
    }
    
  } catch (error) {
    console.error(`‚ùå Erro durante sincroniza√ß√£o de dados: ${error.message}`);
  }
  
  console.log('=== SINCRONIZA√á√ÉO CONCLU√çDA ===');
}

// Executar fun√ß√£o principal
sincronizarDados()
  .then(() => {
    console.log('‚ú® Processo finalizado');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• Erro fatal:', error);
    process.exit(1);
  });
