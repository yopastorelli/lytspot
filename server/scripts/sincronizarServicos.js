/**
 * Script para sincronizar servi√ßos entre o banco de dados e os dados de demonstra√ß√£o
 * @version 1.0.0 - 2025-03-13
 * @description Garante que os servi√ßos no banco de dados estejam sincronizados com os dados de demonstra√ß√£o
 */

import { PrismaClient } from '@prisma/client';
import dotenv from 'dotenv';
import { getServiceDefinitionsForFrontend, updateDemonstrationService } from '../models/seeds/serviceDefinitions.js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Configura√ß√£o do ambiente
dotenv.config();
const prisma = new PrismaClient();

// Obter diret√≥rio atual
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.resolve(__dirname, '..', '..');

// Configura√ß√µes
const CONFIG = {
  ATUALIZAR_BANCO: true,
  ATUALIZAR_DEMONSTRACAO: true,
  REMOVER_DUPLICACOES: true,
  REORDENAR_SERVICOS: true,
  PRIORIZAR_VLOGS: true
};

async function main() {
  try {
    console.log('üîÑ Iniciando processo de sincroniza√ß√£o de servi√ßos...');
    console.log(`üìã Configura√ß√µes: ${JSON.stringify(CONFIG, null, 2)}`);
    
    // Verificar conex√£o com o banco de dados
    console.log('üîç Verificando conex√£o com o banco de dados...');
    await prisma.$connect();
    console.log('‚úÖ Conex√£o com banco de dados estabelecida.');
    
    // Consultar todos os servi√ßos do banco
    console.log('üìã Consultando servi√ßos no banco de dados...');
    const servicosBanco = await prisma.servico.findMany({
      orderBy: { id: 'asc' }
    });
    
    console.log(`üìã Total de servi√ßos no banco: ${servicosBanco.length}`);
    
    // Obter dados de demonstra√ß√£o
    const servicosDemonstracao = getServiceDefinitionsForFrontend();
    console.log(`üìã Total de servi√ßos na demonstra√ß√£o: ${servicosDemonstracao.length}`);
    
    // Remover duplica√ß√µes (servi√ßos com ID > 8)
    if (CONFIG.REMOVER_DUPLICACOES) {
      console.log('üßπ Verificando duplica√ß√µes...');
      const servicosParaRemover = servicosBanco.filter(s => s.id > 8);
      
      if (servicosParaRemover.length > 0) {
        console.log(`üìã Encontrados ${servicosParaRemover.length} servi√ßos duplicados para remover.`);
        
        for (const servico of servicosParaRemover) {
          await prisma.servico.delete({
            where: { id: servico.id }
          });
          console.log(`   ‚úÖ Servi√ßo ID ${servico.id} (${servico.nome}) removido com sucesso.`);
        }
      } else {
        console.log('‚úÖ N√£o foram encontradas duplica√ß√µes.');
      }
    }
    
    // Atualizar banco de dados com base nos dados de demonstra√ß√£o
    if (CONFIG.ATUALIZAR_BANCO) {
      console.log('üîÑ Atualizando servi√ßos no banco de dados...');
      
      // Re-consultar servi√ßos ap√≥s remo√ß√£o de duplica√ß√µes
      const servicosAtuais = await prisma.servico.findMany({
        orderBy: { id: 'asc' }
      });
      
      // Mapear IDs do banco para IDs da demonstra√ß√£o
      const mapaBancoParaDemonstracao = {};
      
      // Primeiro, mapear por ID
      servicosAtuais.forEach(servicoBanco => {
        const servicoDemonstracao = servicosDemonstracao.find(s => s.id === servicoBanco.id);
        if (servicoDemonstracao) {
          mapaBancoParaDemonstracao[servicoBanco.id] = servicoDemonstracao;
        }
      });
      
      // Depois, tentar mapear por nome para os que n√£o foram mapeados por ID
      servicosAtuais.forEach(servicoBanco => {
        if (!mapaBancoParaDemonstracao[servicoBanco.id]) {
          const servicoDemonstracao = servicosDemonstracao.find(s => 
            s.nome.toLowerCase().includes(servicoBanco.nome.toLowerCase()) || 
            servicoBanco.nome.toLowerCase().includes(s.nome.toLowerCase())
          );
          if (servicoDemonstracao) {
            mapaBancoParaDemonstracao[servicoBanco.id] = servicoDemonstracao;
          }
        }
      });
      
      // Atualizar servi√ßos no banco
      for (const servicoBanco of servicosAtuais) {
        const servicoDemonstracao = mapaBancoParaDemonstracao[servicoBanco.id];
        
        if (servicoDemonstracao) {
          console.log(`üîÑ Atualizando servi√ßo ID ${servicoBanco.id}: "${servicoBanco.nome}" -> "${servicoDemonstracao.nome}"`);
          
          await prisma.servico.update({
            where: { id: servicoBanco.id },
            data: {
              nome: servicoDemonstracao.nome,
              descricao: servicoDemonstracao.descricao,
              preco_base: servicoDemonstracao.preco_base,
              duracao_media_captura: servicoDemonstracao.duracao_media_captura,
              duracao_media_tratamento: servicoDemonstracao.duracao_media_tratamento,
              entregaveis: servicoDemonstracao.entregaveis,
              possiveis_adicionais: servicoDemonstracao.possiveis_adicionais,
              valor_deslocamento: servicoDemonstracao.valor_deslocamento
            }
          });
        } else {
          console.log(`‚ö†Ô∏è N√£o foi poss√≠vel encontrar correspond√™ncia para o servi√ßo ID ${servicoBanco.id}: "${servicoBanco.nome}"`);
        }
      }
    }
    
    // Reordenar servi√ßos (colocar VLOGs no in√≠cio)
    if (CONFIG.REORDENAR_SERVICOS && CONFIG.PRIORIZAR_VLOGS) {
      console.log('üîÑ Reordenando servi√ßos para priorizar VLOGs...');
      
      // Re-consultar servi√ßos ap√≥s atualiza√ß√µes
      const servicosAtualizados = await prisma.servico.findMany();
      
      // Separar VLOGs dos outros servi√ßos
      const vlogs = servicosAtualizados.filter(s => s.nome.toLowerCase().includes('vlog'));
      const outrosServicos = servicosAtualizados.filter(s => !s.nome.toLowerCase().includes('vlog'));
      
      console.log(`üìã Encontrados ${vlogs.length} VLOGs para priorizar.`);
      
      // Atualizar dados de demonstra√ß√£o com a nova ordem
      if (CONFIG.ATUALIZAR_DEMONSTRACAO) {
        console.log('üîÑ Atualizando dados de demonstra√ß√£o com a nova ordem...');
        
        // Criar nova lista de servi√ßos com VLOGs no in√≠cio
        const novaOrdem = [...vlogs, ...outrosServicos];
        
        // Atualizar cada servi√ßo na demonstra√ß√£o
        for (let i = 0; i < novaOrdem.length; i++) {
          const servico = novaOrdem[i];
          updateDemonstrationService(servico.id, { id: i + 1, ...servico });
        }
      }
    }
    
    // Consultar servi√ßos ap√≥s todas as atualiza√ß√µes
    const servicosFinais = await prisma.servico.findMany({
      orderBy: { id: 'asc' }
    });
    
    console.log('üìã Estado final dos servi√ßos:');
    servicosFinais.forEach(servico => {
      console.log(`   ID ${servico.id}: ${servico.nome} - R$ ${servico.preco_base.toFixed(2)}`);
    });
    
    console.log('‚úÖ Processo de sincroniza√ß√£o conclu√≠do com sucesso!');
    console.log('‚ö†Ô∏è Para aplicar as altera√ß√µes, reinicie o servidor de desenvolvimento.');
    
  } catch (error) {
    console.error('‚ùå Erro durante o processo:', error);
  } finally {
    await prisma.$disconnect();
  }
}

main();
