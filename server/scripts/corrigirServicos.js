/**
 * Script para corrigir a estrutura dos servi√ßos no banco de dados
 * @version 1.0.0 - 2025-03-14
 * @description Recria todos os servi√ßos com a estrutura correta
 */

import { PrismaClient } from '@prisma/client';
import { updatedServiceDefinitions } from '../models/seeds/updatedServiceDefinitions.js';

// Cliente Prisma para acesso ao banco de dados
const prisma = new PrismaClient();

/**
 * Fun√ß√£o para sanitizar os dados do servi√ßo antes de salvar no banco
 * @param {Object} serviceData Dados do servi√ßo
 * @returns {Object} Dados do servi√ßo sanitizados
 */
function sanitizeServiceData(serviceData) {
  // Criar objeto detalhes estruturado
  const detalhes = {
    captura: serviceData.duracao_media_captura || '',
    tratamento: serviceData.duracao_media_tratamento || '',
    entregaveis: serviceData.entregaveis || '',
    adicionais: serviceData.possiveis_adicionais || '',
    deslocamento: serviceData.valor_deslocamento || ''
  };

  // Garantir que o campo detalhes seja uma string JSON v√°lida
  return {
    ...serviceData,
    detalhes: JSON.stringify(detalhes)
  };
}

/**
 * Fun√ß√£o para recriar todos os servi√ßos no banco de dados
 */
async function recriarServicos() {
  try {
    console.log('üîÑ Iniciando recria√ß√£o de servi√ßos...');
    
    // Excluir todos os servi√ßos existentes
    console.log('üóëÔ∏è Excluindo servi√ßos existentes...');
    await prisma.servico.deleteMany({});
    console.log('‚úÖ Todos os servi√ßos foram exclu√≠dos com sucesso');
    
    // Criar novos servi√ßos a partir das defini√ß√µes atualizadas
    console.log('üìù Criando novos servi√ßos a partir das defini√ß√µes atualizadas...');
    
    const servicosCriados = [];
    
    for (const servicoDefinicao of updatedServiceDefinitions) {
      try {
        // Remover ID para que o banco gere um novo
        const { id, ...servicoData } = servicoDefinicao;
        
        // Sanitizar dados do servi√ßo
        const dadosSanitizados = sanitizeServiceData(servicoData);
        
        // Criar servi√ßo no banco
        const novoServico = await prisma.servico.create({
          data: dadosSanitizados
        });
        
        console.log(`‚úÖ Servi√ßo "${novoServico.nome}" criado com sucesso (ID: ${novoServico.id})`);
        servicosCriados.push(novoServico);
      } catch (error) {
        console.error(`‚ùå Erro ao criar servi√ßo "${servicoDefinicao.nome}":`, error.message);
      }
    }
    
    console.log(`\n‚úÖ Total de servi√ßos criados: ${servicosCriados.length}`);
    
    // Verificar se todos os servi√ßos foram criados
    if (servicosCriados.length === updatedServiceDefinitions.length) {
      console.log('üéâ Todos os servi√ßos foram criados com sucesso!');
    } else {
      console.warn(`‚ö†Ô∏è Aten√ß√£o: Apenas ${servicosCriados.length} de ${updatedServiceDefinitions.length} servi√ßos foram criados.`);
    }
    
    // Mostrar exemplo do primeiro servi√ßo criado
    if (servicosCriados.length > 0) {
      console.log('\nExemplo de servi√ßo criado:');
      const exemploServico = { ...servicosCriados[0] };
      
      // Tentar fazer parse do campo detalhes para exibi√ß√£o
      try {
        if (typeof exemploServico.detalhes === 'string') {
          exemploServico.detalhes = JSON.parse(exemploServico.detalhes);
        }
      } catch (error) {
        console.error('Erro ao fazer parse do campo detalhes para exibi√ß√£o:', error.message);
      }
      
      console.log(JSON.stringify(exemploServico, null, 2));
    }
  } catch (error) {
    console.error('‚ùå Erro ao recriar servi√ßos:', error);
  } finally {
    // Fechar conex√£o com o banco de dados
    await prisma.$disconnect();
  }
}

// Executar a fun√ß√£o
recriarServicos()
  .catch((error) => {
    console.error('‚ùå Erro durante a execu√ß√£o:', error);
    process.exit(1);
  });
