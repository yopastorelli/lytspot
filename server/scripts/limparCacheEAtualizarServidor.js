/**
 * Script para limpar o cache e atualizar o servidor
 * @version 1.0.0 - 2025-03-13
 * @description Limpa o cache da API e reinicia o servidor para aplicar altera√ß√µes no banco de dados
 */

import { clearCache } from '../middleware/cache.js';
import { PrismaClient } from '@prisma/client';
import dotenv from 'dotenv';

// Configura√ß√£o do ambiente
dotenv.config();
const prisma = new PrismaClient();

async function main() {
  try {
    console.log('üîÑ Iniciando processo de limpeza de cache e atualiza√ß√£o do servidor...');
    
    // Limpar o cache da API
    console.log('üßπ Limpando cache da API...');
    clearCache();
    console.log('‚úÖ Cache da API limpo com sucesso!');
    
    // Verificar conex√£o com o banco de dados
    console.log('üîç Verificando conex√£o com o banco de dados...');
    await prisma.$connect();
    console.log('‚úÖ Conex√£o com banco de dados estabelecida.');
    
    // Consultar servi√ßos para verificar se est√£o atualizados
    const servicos = await prisma.servico.findMany();
    console.log(`üìã Total de servi√ßos no banco: ${servicos.length}`);
    
    // Exibir informa√ß√µes resumidas dos servi√ßos
    console.log('üìã Resumo dos servi√ßos:');
    servicos.forEach(servico => {
      console.log(`${servico.id}. ${servico.nome} - R$ ${servico.preco_base.toFixed(2)}`);
    });
    
    console.log('‚úÖ Processo conclu√≠do com sucesso!');
    console.log('‚ö†Ô∏è Para aplicar as altera√ß√µes, reinicie o servidor de desenvolvimento.');
    
  } catch (error) {
    console.error('‚ùå Erro durante o processo:', error);
  } finally {
    await prisma.$disconnect();
  }
}

main();
