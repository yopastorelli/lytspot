/**
 * Script para testar a atualiza√ß√£o de servi√ßos
 * 
 * Este script testa a funcionalidade de atualiza√ß√£o de servi√ßos, verificando
 * se as altera√ß√µes s√£o corretamente aplicadas no banco de dados.
 * 
 * @version 1.0.0 - 2023-03-13
 */

import axios from 'axios';
import chalk from 'chalk';
import dotenv from 'dotenv';
import { PrismaClient } from '@prisma/client';

// Carregar vari√°veis de ambiente
dotenv.config();

// Inicializar Prisma
const prisma = new PrismaClient();

// Configura√ß√µes
const API_URL = process.env.API_URL || 'http://localhost:3001';
const API_TOKEN = process.env.API_TOKEN;

// Fun√ß√£o para fazer login e obter token
async function login() {
  try {
    console.log(chalk.blue('üîë Realizando login para obter token...'));
    
    const response = await axios.post(`${API_URL}/api/auth/login`, {
      email: process.env.ADMIN_EMAIL,
      password: process.env.ADMIN_PASSWORD
    });
    
    if (response.data && response.data.token) {
      console.log(chalk.green('‚úÖ Login realizado com sucesso!'));
      return response.data.token;
    } else {
      throw new Error('Token n√£o encontrado na resposta');
    }
  } catch (error) {
    console.error(chalk.red('‚ùå Erro ao realizar login:'), error.message);
    if (error.response) {
      console.error(chalk.red('Detalhes:'), error.response.data);
    }
    throw error;
  }
}

// Fun√ß√£o para verificar a exist√™ncia de um servi√ßo no banco de dados
async function verificarServicoBanco(id) {
  try {
    console.log(chalk.blue(`üîç Verificando servi√ßo ${id} diretamente no banco de dados...`));
    
    const servico = await prisma.servico.findUnique({
      where: { id: Number(id) }
    });
    
    if (servico) {
      console.log(chalk.green(`‚úÖ Servi√ßo ${id} encontrado no banco de dados:`));
      console.log(JSON.stringify(servico, null, 2));
      return servico;
    } else {
      console.log(chalk.yellow(`‚ö†Ô∏è Servi√ßo ${id} n√£o encontrado no banco de dados`));
      return null;
    }
  } catch (error) {
    console.error(chalk.red(`‚ùå Erro ao verificar servi√ßo ${id} no banco de dados:`), error.message);
    return null;
  }
}

// Fun√ß√£o para obter um servi√ßo via API
async function obterServico(id, token) {
  try {
    console.log(chalk.blue(`üîç Obtendo servi√ßo ${id} via API...`));
    
    const response = await axios.get(`${API_URL}/api/pricing/${id}`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    
    console.log(chalk.green(`‚úÖ Servi√ßo ${id} obtido com sucesso via API:`));
    console.log(JSON.stringify(response.data, null, 2));
    return response.data;
  } catch (error) {
    console.error(chalk.red(`‚ùå Erro ao obter servi√ßo ${id} via API:`), error.message);
    if (error.response) {
      console.error(chalk.red('Detalhes:'), error.response.data);
    }
    return null;
  }
}

// Fun√ß√£o para atualizar um servi√ßo via API
async function atualizarServico(id, dados, token) {
  try {
    console.log(chalk.blue(`üìù Atualizando servi√ßo ${id} via API...`));
    console.log('Dados para atualiza√ß√£o:', dados);
    
    const response = await axios.put(`${API_URL}/api/pricing/${id}`, dados, {
      headers: { Authorization: `Bearer ${token}` }
    });
    
    console.log(chalk.green(`‚úÖ Servi√ßo ${id} atualizado com sucesso via API:`));
    console.log(JSON.stringify(response.data, null, 2));
    return response.data;
  } catch (error) {
    console.error(chalk.red(`‚ùå Erro ao atualizar servi√ßo ${id} via API:`), error.message);
    if (error.response) {
      console.error(chalk.red('Detalhes:'), error.response.data);
    }
    return null;
  }
}

// Fun√ß√£o principal
async function main() {
  let token;
  
  try {
    console.log(chalk.bold.blue('üöÄ Iniciando teste de atualiza√ß√£o de servi√ßos'));
    
    // Obter token de autentica√ß√£o
    token = API_TOKEN || await login();
    
    // ID do servi√ßo a ser testado
    const servicoId = process.argv[2] || 1;
    
    // Verificar servi√ßo no banco de dados antes da atualiza√ß√£o
    const servicoAntesBanco = await verificarServicoBanco(servicoId);
    
    // Obter servi√ßo via API antes da atualiza√ß√£o
    const servicoAntesAPI = await obterServico(servicoId, token);
    
    if (!servicoAntesAPI && !servicoAntesBanco) {
      console.error(chalk.red(`‚ùå Servi√ßo ${servicoId} n√£o encontrado. Teste cancelado.`));
      return;
    }
    
    // Preparar dados para atualiza√ß√£o
    // Usamos o timestamp para garantir uma altera√ß√£o vis√≠vel
    const timestamp = new Date().toISOString();
    const dadosAtualizacao = {
      nome: `${servicoAntesBanco?.nome || servicoAntesAPI?.nome} (Atualizado: ${timestamp})`,
      descricao: `${servicoAntesBanco?.descricao || servicoAntesAPI?.descricao} (Teste de atualiza√ß√£o: ${timestamp})`,
      preco_base: (servicoAntesBanco?.preco_base || servicoAntesAPI?.preco_base || 100) + 10,
      duracao_media_captura: servicoAntesBanco?.duracao_media_captura || servicoAntesAPI?.duracao_media_captura || '2 horas',
      duracao_media_tratamento: servicoAntesBanco?.duracao_media_tratamento || servicoAntesAPI?.duracao_media_tratamento || '5 dias',
      entregaveis: servicoAntesBanco?.entregaveis || servicoAntesAPI?.entregaveis || 'Teste de entreg√°veis',
      possiveis_adicionais: servicoAntesBanco?.possiveis_adicionais || servicoAntesAPI?.possiveis_adicionais || 'Teste de adicionais',
      valor_deslocamento: servicoAntesBanco?.valor_deslocamento || servicoAntesAPI?.valor_deslocamento || 'Teste de deslocamento'
    };
    
    // Atualizar servi√ßo via API
    const servicoAtualizado = await atualizarServico(servicoId, dadosAtualizacao, token);
    
    if (!servicoAtualizado) {
      console.error(chalk.red(`‚ùå Falha ao atualizar servi√ßo ${servicoId}. Teste cancelado.`));
      return;
    }
    
    // Aguardar um momento para garantir que a atualiza√ß√£o foi processada
    console.log(chalk.blue('‚è≥ Aguardando processamento da atualiza√ß√£o...'));
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Verificar servi√ßo no banco de dados ap√≥s a atualiza√ß√£o
    const servicoDepoisBanco = await verificarServicoBanco(servicoId);
    
    // Obter servi√ßo via API ap√≥s a atualiza√ß√£o
    const servicoDepoisAPI = await obterServico(servicoId, token);
    
    // Verificar se a atualiza√ß√£o foi bem-sucedida
    if (servicoDepoisBanco) {
      const atualizacaoBemSucedida = 
        servicoDepoisBanco.nome.includes(timestamp) && 
        servicoDepoisBanco.descricao.includes(timestamp);
      
      if (atualizacaoBemSucedida) {
        console.log(chalk.bold.green('‚úÖ TESTE BEM-SUCEDIDO: Atualiza√ß√£o refletida no banco de dados!'));
      } else {
        console.log(chalk.bold.red('‚ùå TESTE FALHOU: Atualiza√ß√£o N√ÉO refletida no banco de dados!'));
        console.log('Esperado:', timestamp);
        console.log('Encontrado no nome:', servicoDepoisBanco.nome);
        console.log('Encontrado na descri√ß√£o:', servicoDepoisBanco.descricao);
      }
    } else {
      console.log(chalk.bold.yellow('‚ö†Ô∏è N√£o foi poss√≠vel verificar a atualiza√ß√£o no banco de dados'));
    }
    
    // Verificar se a API est√° retornando os dados atualizados
    if (servicoDepoisAPI) {
      const apiAtualizadaCorretamente = 
        servicoDepoisAPI.nome.includes(timestamp) && 
        (servicoDepoisAPI.descricao.includes(timestamp) || 
         (servicoDepoisAPI.detalhes && servicoDepoisAPI.detalhes.descricao && 
          servicoDepoisAPI.detalhes.descricao.includes(timestamp)));
      
      if (apiAtualizadaCorretamente) {
        console.log(chalk.bold.green('‚úÖ TESTE BEM-SUCEDIDO: API retornando dados atualizados!'));
      } else {
        console.log(chalk.bold.red('‚ùå TESTE FALHOU: API N√ÉO est√° retornando dados atualizados!'));
        console.log('Esperado:', timestamp);
        console.log('Encontrado na API:', servicoDepoisAPI);
      }
    } else {
      console.log(chalk.bold.yellow('‚ö†Ô∏è N√£o foi poss√≠vel verificar a resposta da API ap√≥s atualiza√ß√£o'));
    }
    
  } catch (error) {
    console.error(chalk.bold.red('‚ùå Erro durante o teste:'), error.message);
  } finally {
    // Fechar conex√£o com o banco de dados
    await prisma.$disconnect();
    console.log(chalk.bold.blue('üèÅ Teste conclu√≠do'));
  }
}

// Executar fun√ß√£o principal
main();
