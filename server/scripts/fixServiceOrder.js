/**
 * Script para verificar e corrigir a ordem dos servi√ßos no banco de dados
 * @version 1.0.0 - 2025-03-14 - Implementa√ß√£o inicial
 */

import { PrismaClient } from '@prisma/client';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

// Criar cliente Prisma
const prisma = new PrismaClient({
  log: ['query', 'info', 'warn', 'error'],
});

// Ordem espec√≠fica dos servi√ßos conforme definido nas mem√≥rias
const ORDEM_SERVICOS = [
  "VLOG - Aventuras em Fam√≠lia",
  "VLOG - Amigos e Comunidade",
  "Cobertura Fotogr√°fica de Evento Social",
  "Filmagem de Evento Social",
  "Ensaio Fotogr√°fico de Fam√≠lia",
  "Filmagem A√©rea com Drone",
  "Fotografia A√©rea com Drone"
];

/**
 * Verifica e corrige a ordem dos servi√ßos no banco de dados
 */
async function fixServiceOrder() {
  console.log('üîß Iniciando verifica√ß√£o e corre√ß√£o da ordem dos servi√ßos...');
  
  try {
    // Buscar todos os servi√ßos
    console.log('üîÑ Buscando servi√ßos no banco de dados...');
    const servicos = await prisma.servico.findMany({
      orderBy: {
        id: 'asc'
      }
    });
    
    console.log(`‚úÖ Encontrados ${servicos.length} servi√ßos no banco de dados.`);
    
    if (servicos.length === 0) {
      console.warn('‚ö†Ô∏è Nenhum servi√ßo encontrado no banco de dados. Nada a fazer.');
      return;
    }
    
    // Verificar quais servi√ßos da ordem espec√≠fica existem no banco
    const servicosExistentes = ORDEM_SERVICOS.filter(nome => 
      servicos.some(s => s.nome === nome)
    );
    
    console.log(`‚ÑπÔ∏è Servi√ßos da ordem espec√≠fica encontrados: ${servicosExistentes.length}/${ORDEM_SERVICOS.length}`);
    
    // Verificar servi√ßos faltantes
    const servicosFaltantes = ORDEM_SERVICOS.filter(nome => 
      !servicos.some(s => s.nome === nome)
    );
    
    if (servicosFaltantes.length > 0) {
      console.warn('‚ö†Ô∏è Alguns servi√ßos da ordem espec√≠fica n√£o foram encontrados:');
      servicosFaltantes.forEach(nome => console.log(`   - ${nome}`));
    }
    
    // Verificar servi√ßos extras (n√£o esperados)
    const servicosExtras = servicos
      .filter(s => !ORDEM_SERVICOS.includes(s.nome))
      .map(s => s.nome);
    
    if (servicosExtras.length > 0) {
      console.log('‚ÑπÔ∏è Servi√ßos adicionais encontrados:');
      servicosExtras.forEach(nome => console.log(`   - ${nome}`));
    }
    
    // Verificar se a ordem atual est√° correta
    const ordemAtual = servicos.map(s => s.nome);
    const ordemEsperadaExistente = ORDEM_SERVICOS.filter(nome => ordemAtual.includes(nome));
    
    let ordemCorreta = true;
    let ultimoIndiceEncontrado = -1;
    
    for (const nome of ordemEsperadaExistente) {
      const indiceAtual = ordemAtual.indexOf(nome);
      if (indiceAtual > ultimoIndiceEncontrado) {
        ultimoIndiceEncontrado = indiceAtual;
      } else {
        ordemCorreta = false;
        break;
      }
    }
    
    if (ordemCorreta) {
      console.log('‚úÖ A ordem dos servi√ßos existentes j√° est√° correta!');
      
      // Exibir a ordem atual
      console.log('üìã Ordem atual dos servi√ßos:');
      servicos.forEach((servico, index) => {
        console.log(`   ${index + 1}. ${servico.nome}`);
      });
      
      return;
    }
    
    console.log('‚ö†Ô∏è A ordem dos servi√ßos n√£o est√° correta. Iniciando corre√ß√£o...');
    
    // Criar um mapa de servi√ßos por nome para facilitar o acesso
    const servicosPorNome = {};
    servicos.forEach(s => {
      servicosPorNome[s.nome] = s;
    });
    
    // Atualizar a ordem dos servi√ßos
    console.log('üîÑ Atualizando a ordem dos servi√ßos...');
    
    // Primeiro, ordenar os servi√ßos conforme a ordem espec√≠fica
    const servicosOrdenados = [
      ...ORDEM_SERVICOS.filter(nome => servicosPorNome[nome]).map(nome => servicosPorNome[nome]),
      ...servicos.filter(s => !ORDEM_SERVICOS.includes(s.nome))
    ];
    
    // Exibir a nova ordem
    console.log('üìã Nova ordem dos servi√ßos:');
    servicosOrdenados.forEach((servico, index) => {
      console.log(`   ${index + 1}. ${servico.nome}`);
    });
    
    // Perguntar se deseja continuar
    console.log('\n‚ö†Ô∏è ATEN√á√ÉO: Esta opera√ß√£o ir√° atualizar a ordem dos servi√ßos no banco de dados.');
    console.log('Para continuar, execute este script com o argumento --confirm');
    
    // Verificar se o argumento --confirm foi passado
    if (process.argv.includes('--confirm')) {
      console.log('üîÑ Confirma√ß√£o recebida. Atualizando banco de dados...');
      
      // Atualizar cada servi√ßo com sua nova posi√ß√£o
      for (let i = 0; i < servicosOrdenados.length; i++) {
        const servico = servicosOrdenados[i];
        await prisma.servico.update({
          where: { id: servico.id },
          data: { ordem: i + 1 } // Come√ßar do 1 para facilitar a leitura
        });
      }
      
      console.log('‚úÖ Ordem dos servi√ßos atualizada com sucesso!');
    } else {
      console.log('‚ÑπÔ∏è Opera√ß√£o cancelada. Nenhuma altera√ß√£o foi feita.');
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao corrigir a ordem dos servi√ßos:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar o script
fixServiceOrder()
  .catch(e => {
    console.error('‚ùå Erro n√£o tratado:', e);
    process.exit(1);
  });
